package menu;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.StringTokenizer;

import javax.media.opengl.GL;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLCanvas;
import javax.media.opengl.GLCapabilities;
import javax.media.opengl.GLEventListener;
import javax.media.opengl.glu.GLU;

import levelEditor.LevelEditor;
import levelEditor.LevelEditorWorld;

import com.sun.opengl.util.Animator;
import com.sun.opengl.util.texture.Texture;
import com.sun.opengl.util.texture.TextureData;
import com.sun.opengl.util.texture.TextureIO;

import engine.Database;
import engine.Level;
import engine.MazeRunner;
import engine.UserInput;

public class Main extends Frame implements GLEventListener, MouseListener, KeyListener, MouseMotionListener {
	static final long serialVersionUID = 7526471155622776147L;
	public static ArrayList<Texture> textureList = null;

	// Screen size.
	private int screenWidth = 800, screenHeight = 600;
	private float buttonSize = screenHeight / 10.0f;
	public Teken teken;

	// all the different states and their corresponding number
	final byte MAINMENU = 0;
	final byte GAMEMENU = 1;
	final byte LEVELMENU = 2;
	final byte LOGIN = 3;
	final byte QUIT = 4;
	final byte INGAME = 5;
	final byte LEVELEDITOR = 6;
	final byte PAUZE = 7;
	final byte LOADGAME = 8;
	final byte DELETEGAME = 9;
	final byte LOADLEVEL = 10;

	final boolean fullscreenboolean = false;

	boolean mousemode = false; // a parameter to correctly change when the
								// mousecursor should appear
	private Cursor normalCursor = Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR);

	// private long previousTime = Calendar.getInstance().getTimeInMillis();
	// begintijd vastgesteld
	// final private long startTime = Calendar.getInstance().getTimeInMillis();
	// private long time;
	// is the delta of the time that pause is initaited to the time the game is
	// resumed
	private long ingamepausetime;
	// time the pause is resumed
	private long pausedtime;
	private boolean selectedG = false;
	private boolean selectedL = false;
	private static String mainErrorMessage;
	private static long MEMtime;

	// private boolean mouselookMode;
	// the gamestate
	private static int gamestate;
	// to check if a gamestate was changed
	private static int currentstate = gamestate;
	// if the ingame is started
	private boolean ingamestarted = false;

	// constructors for the different gamestates
	LevelEditor leveleditor;
	MainMenu mainmenu;
	GameMenu gamemenu;
	LevelMenu levelmenu;
	Quit quit;
	LogIn login;
	UserInput userinput;
	static MazeRunner mazerunner;
	public static Database db;

	// A GLCanvas is a component that can be added to a frame. The drawing
	// happens on this component.
	private GLCanvas canvas;

	Fullscreen fullscreen = new Fullscreen();

	GL gl;
	GLU glu;
	GLAutoDrawable drawable;
	public static boolean loggedIn;
	public static String accName;
	public static String accDate;
	public static boolean everplayed;
	public static boolean reloadMazeRunner;

	/*
	 * public long getTime (){ return time; }
	 */

	public long getNewTime() {
		return ingamepausetime;
	}

	/**
	 * The constructor of the window, in which all States can take place
	 */
	public Main() {
		super("Skyland");

		loggedIn = true;
		gamestate = MAINMENU;
		mainErrorMessage = "";
		accName = "Guest";
		MEMtime = Calendar.getInstance().getTimeInMillis();
		reloadMazeRunner = false;

		// Set the desired size and background color of the frame
		if (fullscreenboolean) {
			screenWidth = fullscreen.getWidth();
			screenHeight = fullscreen.getHeight();
		}
		setSize(screenWidth, screenHeight);
		if (fullscreenboolean) {
			fullscreen.init(this);
			setFocusable(true);
		}

		setBackground(new Color(0f, 0f, 0f));

		// When the "X" close button is called, the application should exit.
		this.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}
		});

		// The OpenGL capabilities should be set before initializing the
		// GLCanvas. We use double buffering and hardware acceleration.
		GLCapabilities caps = new GLCapabilities();
		caps.setDoubleBuffered(true);
		caps.setHardwareAccelerated(true);
		caps.setStencilBits(8);

		// Create a GLCanvas with the specified capabilities and add it to this
		// frame. Now, we have a canvas to draw on using JOGL.
		canvas = new GLCanvas(caps);
		add(canvas);

		// Set the canvas' GL event listener to be this class. Doing so gives
		// this class control over what is rendered on the GL canvas.
		canvas.addGLEventListener(this);

		// Also add this class as mouse listener, allowing this class to react
		// to mouse events that happen inside the GLCanvas.
		canvas.addMouseListener(this);
		canvas.addMouseMotionListener(this);
		canvas.addKeyListener(this);

		// An Animator is a JOGL help class that can be used to make sure our
		// GLCanvas is continuously being re-rendered. The animator is run on a
		// separate thread from the main thread.
		Animator anim = new Animator(canvas);
		anim.start();

		// With everything set up, the frame can now be displayed to the user.
		setVisible(true);
	}

	@Override
	/**
	 * A function defined in GLEventListener. It is called once, when the frame containing the GLCanvas 
	 * becomes visible. In this assignment, there is no moving ´camera´, so the view and projection can 
	 * be set at initialization. 
	 */
	public void init(GLAutoDrawable drawable) {
		// Retrieve the OpenGL handle, this allows us to use OpenGL calls.
		// GL gl = drawable.getGL();
		gl = drawable.getGL();
		glu = new GLU();

		// Set the matrix mode to GL_PROJECTION, allowing us to manipulate the
		// projection matrix
		gl.glMatrixMode(GL.GL_PROJECTION);

		// Always reset the matrix before performing transformations, otherwise
		// those transformations will stack with previous transformations!
		gl.glLoadIdentity();
		Teken t = new Teken();
		mainmenu = new MainMenu(screenWidth, screenHeight);

		gamemenu = new GameMenu(screenWidth, screenHeight);
		quit = new Quit(screenWidth, screenHeight);
		login = new LogIn(screenWidth, screenHeight);
		levelmenu = new LevelMenu(screenWidth, screenHeight);
		userinput = new UserInput(canvas);
		mazerunner = new MazeRunner(screenWidth, screenHeight, canvas, drawable, gl, glu, userinput, new Level("world"));
		leveleditor = new LevelEditor(gl, screenWidth, screenHeight, new LevelEditorWorld());
		db = new Database();
		loadTextures(gl);
		// TODO: geluid weer aanzetten en fixen en shit
		// Sound.init();

		/*
		 * glOrtho performs an "orthogonal projection" transformation on the
		 * active matrix. In this case, a simple 2D projection is performed,
		 * matching the viewing frustum to the screen size.
		 */
		gl.glOrtho(0, screenWidth, 0, screenHeight, -10000, 10000);

		// Set the matrix mode to GL_MODELVIEW, allowing us to manipulate the
		// model-view matrix.
		gl.glMatrixMode(GL.GL_MODELVIEW);

		// We leave the model view matrix as the identity matrix. As a result,
		// we view the world 'looking forward' from the origin.
		gl.glLoadIdentity();

		// We have a simple 2D application, so we do not need to check for depth
		// when rendering.
		// gl.glDisable(GL.GL_DEPTH_TEST);

		gl.glDisable(GL.GL_LIGHTING);
		gl.glDisable(GL.GL_CULL_FACE);
		gl.glDisable(GL.GL_DEPTH_TEST);
		gl.glDisable(GL.GL_LIGHTING);
		gl.glDisable(GL.GL_LIGHT0);

		userinput.setmouselookMode(false);
		canvas.setCursor(normalCursor);

		everplayed = false;
	}

	/*
	 * public void loadTextures(GL gl, String filename){
	 * //gl.glEnable(GL.GL_TEXTURE_1D); Texture backTexture = null; try { String
	 * currentdir = System.getProperty("user.dir"); //String filename =
	 * "EditorBackground.png";
	 * 
	 * filename = currentdir+filename; File file = new File(filename);
	 * System.out.println(filename); //InputStream stream =
	 * getClass().getResourceAsStream("texture.jpg"); TextureData data =
	 * TextureIO.newTextureData(file, false, "jpg"); backTexture =
	 * TextureIO.newTexture(data); } catch (IOException exc) {
	 * System.out.println("niet gevonden"); exc.printStackTrace();
	 * System.exit(1); } }
	 */

	@Override
	/**
	 * A function defined in GLEventListener. This function is called many times per second and should 
	 * contain the rendering code.
	 */
	public void display(GLAutoDrawable drawable) {

		if (currentstate != INGAME && mousemode == true) {
			userinput.setmouselookMode(false);
			canvas.setCursor(normalCursor);

			mousemode = false;

		}

		// over de tijd

		// this.time = previousTime - startTime;

		// check of andere gamestate dan INGAME vanuit pauze wordt aangeroepen
		/*
		 * if (currentstate == INGAME && gamestate != INGAME && ingamestarted){
		 * currentstate = gamestate; pausedtime=time; }
		 * 
		 * if (currentstate != INGAME && gamestate == INGAME && ingamestarted){
		 * // calculate the time elapsed while the game was paused
		 * ingamepausetime= time - ingamepausetime; }
		 */

		GL gl = drawable.getGL();

		// Set the clear color and clear the screen.
		gl.glClearColor(0f, 0f, 0f, 1f);
		gl.glClear(GL.GL_COLOR_BUFFER_BIT);

		switch (gamestate) {
		case MAINMENU:

			mainmenu.display(drawable, gl);
			displayAccMsg(drawable, gl);
			currentstate = gamestate;

			break;
		case GAMEMENU:
			gamemenu.display(drawable, gl);
			displayAccMsg(drawable, gl);
			currentstate = gamestate;
			break;
		case LEVELMENU:

			levelmenu.display(drawable, gl);
			displayAccMsg(drawable, gl);
			currentstate = gamestate;

			break;
		case LOGIN:

			login.display(drawable, gl);
			displayAccMsg(drawable, gl);
			currentstate = gamestate;

			break;
		case QUIT:

			quit.display(drawable, gl);
			currentstate = gamestate;

			break;
		case INGAME:
			selectedG = false;
			if (!ingamestarted) {
				ingamestarted = true;
				mazerunner.init(drawable, gl, glu);

				// hier alle inits voor de mazerunner
				// mazerunner.initObjects(canvas, userinput);

			}
			if (currentstate != gamestate) {
				userinput.setmouselookMode(true);
				mousemode = true;
				userinput.noMousechange();
				mazerunner.setScreen(glu, gl, screenWidth, screenHeight);
			}
			gl = drawable.getGL();
			mazerunner.display(drawable, gl);
			currentstate = gamestate;
			break;

		case LOADGAME:
			if (!selectedG) {
				selectedG = true;
				KiesFileUitBrowser kfub = new KiesFileUitBrowser();
				String currentdir = System.getProperty("user.dir");
				String filename = kfub.loadFile(new Frame(), "Open...", currentdir + "\\worlds\\", "*.txt");
				// filename = currentdir + "\\levels\\" + filename;
				if (filename == null) {
					filename = "world.txt";
				}
				mazerunner = new MazeRunner(screenWidth, screenHeight, canvas, drawable, gl, glu, userinput, new Level(filename.substring(0, filename.length() - 4)));
				gamestate = INGAME;
			}
			break;

		case LEVELEDITOR:
			// leveleditor = new LevelEditor(screenWidth, screenHeight);
			if (currentstate != gamestate) {

				// try{leveleditor=new LevelEditor(screenWidth, screenHeight,
				// LevelEditorWorld.readWorld(System.getProperty("user.dir") +
				// "\\worlds\\world.txt"));}
				// catch (FileNotFoundException
				// e){System.out.println("file niet gevonden");}
				gl.glMatrixMode(GL.GL_PROJECTION);
				gl.glLoadIdentity();
				gl.glOrtho(0, screenWidth, 0, screenHeight, -10000, 10000);

			}
			selectedL = false;
			// gl.glLoadIdentity();
			// gl.glOrtho(0, screenWidth, 0, screenHeight, -1, 1);
			gl = drawable.getGL();
			// gl.glLoadIdentity();
			leveleditor.display(drawable, gl);
			// leveleditor.setScreen(screenWidth, screenHeight);
			currentstate = gamestate;
			break;
		case PAUZE:

			break;

		case LOADLEVEL:
			// leveleditor = new LevelEditor(screenWidth, screenHeight);
			if (currentstate != gamestate) {
				if (!selectedL) {
					selectedL = true;
					KiesFileUitBrowser kfub2 = new KiesFileUitBrowser();
					String currentdir2 = System.getProperty("user.dir");
					String filename2 = kfub2.loadFile(new Frame(), "Open world...", currentdir2 + "\\worlds\\", "*.txt");
					if (filename2 == null) {
						filename2 = "world.txt";
					}
					filename2 = currentdir2 + "\\worlds\\" + filename2;
					System.out.println(filename2);
					try {
						leveleditor = new LevelEditor(gl, screenWidth, screenHeight, LevelEditorWorld.readWorld(filename2));
					} catch (FileNotFoundException e) {
						System.out.println("file niet gevonden");
					}
					gl.glMatrixMode(GL.GL_PROJECTION);
					gl.glLoadIdentity();
					gl.glOrtho(0, screenWidth, 0, screenHeight, -10000, 10000);
				}
			}
			gamestate = LEVELEDITOR;
			break;
		}
		

		gl.glFlush();
	}

	private void displayAccMsg(GLAutoDrawable drawable, GL gl) {
		if (loggedIn) {
			Teken.textDrawMetKleur(drawable, gl, "You are logged in as", 730f / 1920f * screenWidth, 100f / 1080f * screenHeight, 30, 1f, 1f, 1f);

			if (mainErrorMessage.equals("")) {
				Teken.textDrawMetKleur(drawable, gl, accName, 730f / 1920f * screenWidth, 60f / 1080f * screenHeight, 30, 1f, 0f, 0f);
				if (!accName.equals("Guest")) {
					Teken.textDrawMetKleur(drawable, gl, "Last appearance: " + accDate, 730f / 1920f * screenWidth, 20f / 1080f * screenHeight, 30, 1f, 1f, 1f);
				} else {
					Teken.textDrawMetKleur(drawable, gl, "Feel free to create an account or log in!", 730f / 1920f * screenWidth, 20f / 1080f * screenHeight, 30, 1f, 1f, 1f);
				}
			} else {
				if (Calendar.getInstance().getTimeInMillis() - MEMtime > 5000) {
					setMainErrorMessage("");
				}
				Teken.textDrawMetKleur(drawable, gl, mainErrorMessage, 730f / 1920f * screenWidth, 60f / 1080f * screenHeight, 30, 1f, 1f, 1f);
			}

		} else {
			Teken.textDrawMetKleur(drawable, gl, "You are not logged in", 730f / 1920f * screenWidth, 100f / 1080f * screenHeight, 30, 1f, 1f, 1f);
			if (Calendar.getInstance().getTimeInMillis() - MEMtime > 5000) {
				setMainErrorMessage("");
			}
			Teken.textDrawMetKleur(drawable, gl, mainErrorMessage, 730f / 1920f * screenWidth, 60f / 1080f * screenHeight, 30, 1f, 1f, 1f);
		}
	}

	public static void setMainErrorMessage(String string) {
		mainErrorMessage = string;
		MEMtime = Calendar.getInstance().getTimeInMillis();
	}

	public void displayChanged(GLAutoDrawable drawable, boolean modeChanged, boolean deviceChanged) {
		// Not needed.
	}

	@Override
	/**
	 * A function defined in GLEventListener. This function is called when the GLCanvas is resized or moved. 
	 * Since the canvas fills the frame, this event also triggers whenever the frame is resized or moved.
	 */
	public void reshape(GLAutoDrawable drawable, int x, int y, int width, int height) {
		// GL gl = drawable.getGL();

		// Set the new screen size and adjusting the viewport
		screenWidth = width;
		screenHeight = height;
		buttonSize = height / 10.0f;
		gl.glViewport(0, 0, screenWidth, screenHeight);
		userinput.reshape();

		mainmenu.setScreen(screenWidth, screenHeight);
		gamemenu.setScreen(screenWidth, screenHeight);
		levelmenu.setScreen(screenWidth, screenHeight);
		login.setScreen(screenWidth, screenHeight);
		quit.setScreen(screenWidth, screenHeight);
		mazerunner.setScreen(screenWidth, screenHeight);
		leveleditor.setScreen(screenWidth, screenHeight);

		switch (gamestate) {

		case LEVELEDITOR:

			// Update the projection to an orthogonal projection using the new
			// screen size
			gl.glMatrixMode(GL.GL_PROJECTION);
			gl.glLoadIdentity();
			gl.glOrtho(0, screenWidth, 0, screenHeight, -10000, 10000);

			break;

		case LOADLEVEL:
			break;
		}

	}

	/**
	 * A function defined in MouseListener. Is called when the pointer is in the
	 * GLCanvas, and a mouse button is released.
	 */
	@Override
	public void mouseReleased(MouseEvent me) {

		// GL gl = drawable.getGL();

		switch (gamestate) {
		case MAINMENU:

			gamestate = mainmenu.mouseReleased(me);

			break;
		case GAMEMENU:

			gamestate = gamemenu.MouseReleased(me);
			break;
		case LEVELMENU:

			gamestate = levelmenu.MouseReleased(me);

			break;
		case LOGIN:

			login.mouseReleased(me);

			break;
		case QUIT:
			quit.setScreen(screenWidth, screenHeight);
			gamestate = quit.mouseReleased(me);

			break;
		case INGAME:

			break;
		case LEVELEDITOR:

			leveleditor.mouseReleased(me);

			break;
		case PAUZE:

			break;
		case LOADLEVEL:
			break;
		}
	}

	@Override
	public void mouseClicked(MouseEvent arg0) {
		switch (gamestate) {
		case MAINMENU:

			break;
		case GAMEMENU:

			break;
		case LEVELMENU:

			break;
		case LOGIN:

			break;
		case QUIT:

			break;
		case INGAME:

			break;
		case LEVELEDITOR:

			break;
		case PAUZE:

			break;
		}
	}

	@Override
	public void mouseEntered(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mousePressed(MouseEvent e) {
		switch (gamestate) {
		case MAINMENU:

			break;
		case GAMEMENU:

			break;
		case LEVELMENU:

			break;
		case LOGIN:

			break;
		case QUIT:

			break;
		case INGAME:

			userinput.mousePressed(e);

			break;

		case LOADGAME:

			userinput.mousePressed(e);

			break;
		case LEVELEDITOR:
			try {
				leveleditor.mousePressed(e);
			} catch (FileNotFoundException e1) {
				e1.printStackTrace();
			}
			System.out.println(e.getButton());
			break;
		case PAUZE:

			break;
		case LOADLEVEL:
			break;
		}

	}

	public static void main(String[] args) {
		new Main();
	}

	@Override
	public void mouseDragged(MouseEvent e) {
		if (gamestate == INGAME) {
			userinput.mouseDragged(e);
		}
		if (gamestate == LEVELEDITOR) {
			leveleditor.mouseDragged(e);
		}

	}

	@Override
	public void mouseMoved(MouseEvent e) {
		if (gamestate == INGAME) {
			userinput.mouseMoved(e);
		}
	}

	@Override
	public void keyPressed(KeyEvent e) {

		if (gamestate == INGAME) {
			userinput.keyPressed(e);
		} else if (gamestate == LEVELEDITOR) {
			leveleditor.keyPressed(e);
		}

	}

	@Override
	public void keyReleased(KeyEvent e) {

		if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
			gamestate = MAINMENU;
		}

		if (gamestate == INGAME) {
			userinput.keyReleased(e);
		}

	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub

	}

	public void loadTextures(GL gl) {
		System.out.println("Texture loading... ");
		gl.glEnable(GL.GL_TEXTURE_2D);
		String curDir = System.getProperty("user.dir") + "\\textures\\";
		File f = new File(curDir + "_textures.txt");
		try {
			BufferedReader bufRdr = new BufferedReader(new FileReader(f));
			String line = null;

			// Check size
			int i = 0;
			while ((line = bufRdr.readLine()) != null) {
				i++;
			}
			bufRdr.close();

			textureList = new ArrayList<Texture>();
			ArrayList<File> fileList = new ArrayList<File>();
			for (int j = 0; j < i + 2; j++) {
				textureList.add(null);
				fileList.add(null);
			}
			System.out.println("TextureList size: " + textureList.size());

			bufRdr = new BufferedReader(new FileReader(f));
			while ((line = bufRdr.readLine()) != null) {
				StringTokenizer st = new StringTokenizer(line, ": ");
				int nummer = Integer.parseInt(st.nextToken());
				String string = curDir + st.nextToken();
				File file = new File(string);
				fileList.set(nummer, file);
				// System.out.println(nummer + " " + file);
			}
			for (int z = 0; z < fileList.size(); z++) {
				File file = fileList.get(z);
				try {
					TextureData textureData = TextureIO.newTextureData(file, false, "jpg");
					Texture texture = TextureIO.newTexture(textureData);
					texture.enable();
					textureList.set(z, texture);
					System.out.println("Texture succesfully loaded: " + z + ": " + file);
				} catch (Exception e) {
					System.out.println("fout: " + e.getMessage());
				}
			}
		} catch (Exception e) {
			System.out.println("fout: " + e.getMessage());
		}
		System.out.println("Textures loaded");
	}

	public int getCurrentstate() {
		return currentstate;
	}

	public static void setCurrentstate(int input) {
		currentstate = input;
		gamestate = input;
	}

	public static void drawMenuBackground4buttons(GL gl, int screenWidth, int screenHeight) {
		gl.glDisable(GL.GL_DEPTH_TEST);
		gl.glMatrixMode(GL.GL_PROJECTION);
		gl.glLoadIdentity();
		gl.glOrtho(0, screenWidth, 0, screenHeight, -10000, 10000);
		Teken.plaatsTexture(gl, 0, 0, screenWidth, screenHeight, 19);

	}

	public static void drawMenuBackground3buttons(GL gl, int screenWidth, int screenHeight) {
		gl.glDisable(GL.GL_DEPTH_TEST);
		gl.glMatrixMode(GL.GL_PROJECTION);
		gl.glLoadIdentity();
		gl.glOrtho(0, screenWidth, 0, screenHeight, -10000, 10000);
		Teken.plaatsTexture(gl, 0, 0, screenWidth, screenHeight, 43);
	}

	public static void drawLevelEditorBG(GL gl, int screenWidth, int screenHeight) {
		gl.glDisable(GL.GL_DEPTH_TEST);
		gl.glMatrixMode(GL.GL_PROJECTION);
		gl.glLoadIdentity();
		gl.glOrtho(0, screenWidth, 0, screenHeight, -10000, 10000);
		Teken.plaatsTexture(gl, 0, 0, screenWidth, screenHeight, 44);
	}

	

}