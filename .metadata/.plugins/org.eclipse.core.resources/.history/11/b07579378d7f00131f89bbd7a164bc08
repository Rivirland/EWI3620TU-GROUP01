package engine;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class GeneticAlgorithm {
	private ArrayList<Maze> mazes;
	public int parentsPerIteration;
	public double[][] distances;

	public GeneticAlgorithm(ArrayList<Maze> mazelist, int ppi) {
		ArrayList<Maze> mazesWithPortals = new ArrayList<Maze>();
		for(Maze m : mazelist){
			if(m.hasPortals){
				mazesWithPortals.add(m);
			}
		}
		mazes = mazesWithPortals;
		parentsPerIteration = ppi;
		distances = calcDistances();
	}

	// public void assignPortalID() {
	// int i = 0;
	// for (Portal p : MazeRunner.portalList) {
	// p.setPortalID(i);
	// i++;
	// }
	// }

	public void connectPortals() {

	}

	public int[] solve() {
		int[][] parents = generateParents();
		double min = Integer.MAX_VALUE;
		for (int i = 0; i < 100; i++) {
			parents = iterate(parents, i);
			double l = calcDistance(parents[0]);
			if (l < min) {
				min = l;
			}
		}

		// This is added to make sure the array doesn't get mixed up: sometimes,
		// [1,2,3,4,5] and [5,4,3,2,1] are both valid solutions. This ensures
		// that the same one is always used, so your level doesn't end up
		// backwards.
		int pLength = parents[0].length;
		if (parents[0][0] > parents[0][pLength - 1]) {
			int[] parents2 = new int[pLength];
			for (int i = 0; i < pLength; i++) {
				parents2[i] = parents[0][pLength - 1 - i];
			}
			return parents2;
		}
		return parents[0];
	}

	public int[][] iterate(int[][] parents, int iteration) {
		// Saves all the new parents into the results matrix
		int[][] results = new int[parentsPerIteration * 2][mazes.size()];
		for (int row = 0; row < parentsPerIteration; row++) {
			results[row] = parents[row];
		}

		// Generates random children and puts them into results
		for (int row = 0; row < parentsPerIteration / 2; row++) {
			int p1 = (int) (parentsPerIteration * Math.random());
			int p2 = (int) (parentsPerIteration * Math.random());
			results[parentsPerIteration + row] = mutation(crossover(parents[p1], parents[p2]));
			results[parentsPerIteration + row + parentsPerIteration / 2] = mutation(crossover(parents[p2], parents[p1]));
		}

		// sorts the parents and children in results on length and selects the
		// new parents
		// by storing the parentsPerIteration fittest chromosomes in a new
		// matrix
		int[] lengths = new int[2 * parentsPerIteration];
		for (int row = 0; row < results.length; row++) {
			lengths[row] = calcDistance(results[row]);
		}
		int[] sorted = (int[]) lengths.clone();
		Arrays.sort(sorted);

		int[][] newParents = new int[parentsPerIteration][mazes.size()];
		for (int i = 0; i < parentsPerIteration; i++) {
			for (int j = 0; j < lengths.length; j++) {
				if (sorted[i] == lengths[j]) {
					newParents[i] = results[j];
				}
			}
		}

		// Checks if a new global optimum has been found
		int minLength = Integer.MAX_VALUE;
		int length = this.calcDistance(newParents[0]);
		if (length < minLength) {
			minLength = length;
			// System.out.println("i: " + iteration + ", l: " + length);
		}
		// System.out.print(this.calcDistance(newParents[0]) + ",");

		return newParents;
	}

	// Generates random parents
	private int[][] generateParents() {
		int[][] parents = new int[parentsPerIteration][mazes.size()];
		for (int i = 0; i < parentsPerIteration; i++) {
			List<Integer> data = new ArrayList<Integer>();
			for (int j = 0; j < mazes.size(); j++) {
				data.add(j + 1);
			}
			Collections.shuffle(data);
			int[] num = new int[data.size()];
			for (int j = 0; j < data.size(); j++) {
				num[j] = data.get(j);
			}
			parents[i] = num;
		}
		return parents;
	}

	private double[][] calcDistances() {
		double[][] res = new double[mazes.size()][mazes.size()];
		for (int i = 0; i < mazes.size(); i++) {
			for (int j = 0; j <= i; j++) {
				if (j == i) {
					res[i][j] = 0;
				} else {
					double distance = Integer.MAX_VALUE;
					for (int x = 0; x < 2; x++) {
						for (int y = 0; y < 2; y++) {
							double dX = MazeRunner.portalList.get(i * 2 + x).getX() - MazeRunner.portalList.get(j * 2 + y).getX();
							double dY = MazeRunner.portalList.get(i * 2 + x).getY() - MazeRunner.portalList.get(j * 2 + y).getY();
							double dZ = MazeRunner.portalList.get(i * 2 + x).getZ() - MazeRunner.portalList.get(j * 2 + y).getZ();
							if (Math.sqrt(dX * dX + dY * dY + dZ * dZ) < distance) {
								distance = Math.sqrt(dX * dX + dY * dY + dZ * dZ);
							}
						}
					}
					res[i][j] = distance;
					res[j][i] = distance;
				}
			}
		}
		return res;
	}

	public static int[] mutation(int[] parent) {
		double rand1 = Math.random();
		if (rand1 < 0.05) {
			int rand2 = (int) (Math.random() * parent.length);
			int rand3 = (int) (Math.random() * parent.length);

			int cityOn2 = parent[rand2];
			int cityOn3 = parent[rand3];

			parent[rand2] = cityOn3;
			parent[rand3] = cityOn2;
		}
		return parent;
	}

	// Implements the crossover: you select a random part of parent 1 and
	// fill the child with that part on the same position. You fill the rest
	// of the child with the numbers it doesn't contain yet in the order you
	// find them in the second parent. 1 2 3 4 and 4 3 2 1 result in 1 2 4 3
	// if you end up copying '1 2', for example.
	public static int[] crossover(int[] parent1, int[] parent2) {
		int[] child = new int[parent1.length];

		int startPos = (int) (Math.random() * parent1.length);
		int endPos = (int) (Math.random() * parent1.length);

		// Changes startPos into endPos and the other way around if the first is
		// bigger
		if (startPos > endPos) {
			int temp = startPos;
			startPos = endPos;
			endPos = temp;
		}

		// copies the selected array
		for (int i = 0; i < child.length; i++) {
			if (i >= startPos && i <= endPos) {
				child[i] = parent1[i];
			}
		}

		// fills the gaps
		for (int i = 0; i < child.length; i++) {
			if (!containsNumber(child, parent2[i]))
				for (int j = 0; j < child.length; j++) {
					if (child[j] == 0) {
						child[j] = parent2[i];
						break;
					}
				}
		}

		return child;
	}

	// Checks if the already chromosome contains a certain number
	public static boolean containsNumber(int[] anArray, int city) {
		for (int i = 0; i < anArray.length; i++) {
			if (anArray[i] == city) {
				return true;
			}
		}
		return false;
	}

	public int calcDistance(int[] parent) {
		int d = 0;
		for (int i = 0; i < parent.length - 1; i++) {
			d += distances[parent[i] - 1][parent[i + 1] - 1];
		}
		return d;
	}

}
