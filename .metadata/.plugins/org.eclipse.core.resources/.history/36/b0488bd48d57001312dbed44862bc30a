package enemies;

import javax.media.opengl.GL;

import com.sun.opengl.util.GLUT;

import engine.Maze;
import engine.MazeRunner;
import engine.Player;
import engine.VisibleObject;

public class EnemySpooky extends Enemy implements VisibleObject {

	public EnemySpooky(double x, double y, double z, double speed, double h) {
		super(x, y, z, speed, h);
	}

	public void update(int deltaTime, Player player) {
		if (MazeRunner.level.inSameMaze(this, player) != -1) {

			int currentMazeID = MazeRunner.level.getCurrentMaze(this);
			Maze currentMaze = MazeRunner.level.getMaze(currentMazeID);

			int enemyMatrixX = currentMaze.coordToMatrixElement(locationX);
			int enemyMatrixZ = currentMaze.coordToMatrixElement(locationZ);

			double playerX = player.getLocationX();
			double playerZ = player.getLocationZ();

			int playerMatrixX = currentMaze.coordToMatrixElement(playerX);
			int playerMatrixZ = currentMaze.coordToMatrixElement(playerZ);

			this.updateMovementFollow(player);

			if (enemyMatrixX == playerMatrixX && enemyMatrixZ == playerMatrixZ) {
				if (locationX > playerX) {
					this.locationX -= this.speed * deltaTime;
				}
				if (locationX < playerX) {
					this.locationX += this.speed * deltaTime;
				}
				if (locationZ > playerZ) {
					this.locationZ -= this.speed * deltaTime;
				}
				if (locationZ < playerZ) {
					this.locationZ += this.speed * deltaTime;
				}
				if (Math.sqrt(Math.pow(locationZ - playerZ, 2)
						+ Math.pow(locationX - playerX, 2)) < 1) {
					System.out.println("dood!");
					// try {
					// Thread.sleep(1000);
					// } catch (InterruptedException e1) {
					// // TODO Auto-generated catch block
					// e1.printStackTrace();
					// }
					player.setLocationX(player.begX);
					player.setLocationY(player.begY);
					player.setLocationZ(player.begZ);
					for (int resetEnemy = 0; resetEnemy < MazeRunner.enemyList
							.size(); resetEnemy++) {
						Enemy resEnemy = MazeRunner.enemyList.get(resetEnemy);
						resEnemy.setLocationX(resEnemy.begX);
						resEnemy.setLocationZ(resEnemy.begZ);
					}
				}
			}

			if (locationX > currentMaze.maxX - 1
					|| locationX < currentMaze.minX + 1) {
				this.setLocationX(locationX);
			}
			if (locationZ > currentMaze.maxZ - 1
					|| locationZ < currentMaze.minZ + 1) {
				this.setLocationZ(locationZ);
			}

		} else {
//			System.out.println("Spooky says: you're not in the maze");
			double locationX = this.getLocationX();
			double locationZ = this.getLocationZ();
			this.updateMovementPatrol();
			Maze currentMaze = MazeRunner.level.getMaze(MazeRunner.level
					.getCurrentMaze(this));
			System.out.println(currentMaze.minZ +", " + currentMaze.maxZ);
			System.out.println((int)locationZ);

			if (locationX > currentMaze.maxX - 1
					|| locationX < currentMaze.minX + 1) {
				this.setLocationX(locationX);
			}
			if (locationZ > currentMaze.maxZ - 1
					|| locationZ < currentMaze.minZ + 1) {
				this.setLocationZ(locationZ);
			}

		}

		if (west) {
			locationX -= speed * deltaTime;
		}
		if (east) {
			locationX += speed * deltaTime;
		}
		if (north) {
			locationZ -= speed * deltaTime;
		}
		if (south) {
			locationZ += speed * deltaTime;
		}

	}

	@Override
	public void display(GL gl) {
		gl.glColor3d(0.0, 0.0, 1.0);
		gl.glPushMatrix();

		gl.glTranslated(getLocationX(), 2.5, getLocationZ());
		drawEnemy(gl);

		gl.glPopMatrix();
		gl.glFlush(); // Flush drawing routines
	}

	public void drawEnemy(GL gl) {
		GLUT glut = new GLUT();
		glut.glutSolidTeapot(1);
	}

}
