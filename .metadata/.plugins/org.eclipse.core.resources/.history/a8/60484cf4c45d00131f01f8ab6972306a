package engine;

import items.*;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;

import javax.media.opengl.GL;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLCanvas;
import javax.media.opengl.glu.GLU;

import model.Model;
import model.OBJLoader;

import com.sun.opengl.util.GLUT;
import com.sun.opengl.util.texture.Texture;
import com.sun.opengl.util.texture.TextureData;
import com.sun.opengl.util.texture.TextureIO;

import enemies.*;

/**
 * MazeRunner is the base class of the game, functioning as the view controller
 * and game logic manager.
 * <p>
 * Functioning as the window containing everything, it initializes both JOGL,
 * the game objects and the game logic needed for MazeRunner.
 * <p>
 * For more information on JOGL, visit <a
 * href="http://jogamp.org/wiki/index.php/Main_Page">this page</a> for general
 * information, and <a
 * href="https://jogamp.org/deployment/jogamp-next/javadoc/jogl/javadoc/">this
 * page</a> for the specification of the API.
 * 
 * @author Bruno Scheele, revised by Mattijs Driel
 * 
 */
public class MazeRunner {

	/*
	 * **********************************************
	 * * Local variables * **********************************************
	 */

	private int screenWidth, screenHeight; // Screen size.
	public static ArrayList<VisibleObject> visibleObjects = new ArrayList<VisibleObject>(); // A
																							// list
																							// of
																							// objects
	// that
	// will be displayed
	// on
	// screen.
	public static Player player; // The player object.
	public static ArrayList<Enemy> enemyList = new ArrayList<Enemy>();
	public static ArrayList<Bullet> bulletList = new ArrayList<Bullet>();
	public static ArrayList<Roof> roofList = new ArrayList<Roof>();
	// private int enemyListLength;
	private Camera camera; // The camera object.
	// private UserInput input; // The user input object that controls the
	// player.
	private EnemyControl enemyControl;
	public static Level level;
	// private long previousTime = Calendar.getInstance().getTimeInMillis();
	// final private long startTime =
	// Calendar.getInstance().getTimeInMillis();// Used

	private long previousTime = Calendar.getInstance().getTimeInMillis();
	private long startTime = Calendar.getInstance().getTimeInMillis();
	public static Model spookyModel, m21Model, torchModel;
	public static Texture earthTexture, wallTexture, roofTexture,
			trapHolderTexture, oildrumTexture, woodTexture;
	public int mazeX, mazeY, mazeZ;
	private Portal portal1, portal2;
	private UserInput input;

	/*
	 * **********************************************
	 * * Initialization methods * **********************************************
	 */
	/**
	 * Initializes the complete MazeRunner game.
	 * <p>
	 * MazeRunner extends Java AWT Frame, to function as the window. It creats a
	 * canvas on itself where JOGL will be able to paint the OpenGL graphics. It
	 * then initializes all game components and initializes JOGL, giving it the
	 * proper settings to accurately display MazeRunner. Finally, it adds itself
	 * as the OpenGL event listener, to be able to function as the view
	 * controller.
	 */

	public MazeRunner(int screenWidth, int screenHeight, GLCanvas canvas,
			GLAutoDrawable drawable, GL gl, GLU glu, UserInput userinput,
			Level level) {
		setScreen(screenWidth, screenHeight);
		init(drawable, gl, glu);
		initObjects(canvas, userinput, level);

	}

	public void setScreen(int screenWidth, int screenHeight) {
		this.screenWidth = screenWidth;
		this.screenHeight = screenHeight;
	}

	public void setScreen(GLU glu, GL gl, int screenWidth, int screenHeight) {

		this.screenWidth = screenWidth;
		this.screenHeight = screenHeight;

		gl.glViewport(0, 0, screenWidth, screenHeight); // VOOR PORTAL!!!!!!!

		// Set the new projection matrix.
		gl.glMatrixMode(GL.GL_PROJECTION);
		gl.glLoadIdentity();
		glu.gluPerspective(60, screenWidth / screenHeight, .1, 200);
		gl.glMatrixMode(GL.GL_MODELVIEW);

		input.reshape();

	}

	public void noMousechange() {
		player.noMousechange();
		input.noMousechange();
	}

	public void initObjects(GLCanvas canvas, UserInput input, Level level) {
		// We define an ArrayList of VisibleObjects to store all the objects
		// that need to be
		// displayed by MazeRunner.
		// Add the maze that we will be using.

		this.level = level;
		Roof roof = new Roof(1, 1, 0.5, 5, 0.5, 1, 5, 6.5);
		roofList.add(roof);
		portal1 = new Portal(106, 2, 106, 2);

		portal2 = new Portal(160, 2, 160, 2);

		Portal.portalConnection(portal1, portal2);
		for (int i = 0; i < level.getAantal(); i++) {
			visibleObjects.add(level.getMaze(i));
		}

		// Initialize the player.
		player = new Player(5, 2.5, 5, -90, 0);

		camera = new Camera(player.getLocationX(), player.getLocationY(),
				player.getLocationZ(), player.getHorAngle(),
				player.getVerAngle());

		// Initialize the enemies.
		for (int i = 0; i < enemyList.size(); i++) {
			enemyList.get(i).setControl(enemyControl);
			visibleObjects.add(enemyList.get(i));
		}
		for (int i = 0; i < roofList.size(); i++){
			visibleObjects.add(roofList.get(i));
		}

		// input = new UserInput(canvas);

		this.input = input;
		player.setControl(input);
	}

	/*
	 * **********************************************
	 * * OpenGL event handlers * **********************************************
	 */

	/**
	 * init(GLAutodrawable) is called to initialize the OpenGL context, giving
	 * it the proper parameters for viewing.
	 * <p>
	 * Implemented through GLEventListener. It sets up most of the OpenGL
	 * settings for the viewing, as well as the general lighting.
	 * <p>
	 * It is <b>very important</b> to realize that there should be no drawing at
	 * all in this method.
	 */
	public void init(GLAutoDrawable drawable, GL gl, GLU glu) {

		// GLU glu = new GLU();
		// drawable.setGL(new DebugGL(drawable.getGL())); // We set the OpenGL
		// pipeline to Debugging
		// mode
		/*
		 * gl.glClearColor(0, 0, 0, 0); // Set the background color.
		 * 
		 * // Now we set up our viewpoint. gl.glMatrixMode(GL.GL_PROJECTION); //
		 * We'll use orthogonal projection. gl.glLoadIdentity(); // Reset the
		 * current matrix.
		 */
		// @gamestate switch
		glu.gluPerspective(60, screenWidth, screenHeight, 200); // Set up the
																// parameters
																// for
																// perspective
																// viewing.
		gl.glMatrixMode(GL.GL_MODELVIEW);

		// TODO: back-face weer aanzetten
		// Enable back-face culling.
		// gl.glCullFace(GL.GL_BACK);
		// gl.glEnable(GL.GL_CULL_FACE);

		// @Enable Z-buffering, gamestate switch
		// gl.glEnable(GL.GL_DEPTH_TEST);

		// @ gamestate switch dit ook wanneer de mazerunner gebruikt wordt
		// Set and enable the lighting.
		float lightPosition[] = { 0.0f, 50.0f, 0.0f, 1.0f }; // High up in the
																// sky!
		float lightColour[] = { 1.0f, 1.0f, 1.0f, 0.0f }; // White light!
		gl.glLightfv(GL.GL_LIGHT0, GL.GL_POSITION, lightPosition, 0); // Note
																		// that
																		// we're
																		// setting
																		// Light0.
		gl.glLightfv(GL.GL_LIGHT0, GL.GL_AMBIENT, lightColour, 0);
		gl.glEnable(GL.GL_LIGHTING);
		gl.glEnable(GL.GL_LIGHT0);

		// Set the shading model.
		gl.glShadeModel(GL.GL_SMOOTH);
		// Set the shading model.
		// gl.glShadeModel(GL.GL_SMOOTH);
		loadTextures(gl);
		loadModels(gl);
		// @@
	}

	public void setTime(long time) {
		this.previousTime = time;
	}

	// function to test multiple views, and later to test portals
	public void multipleView(GLAutoDrawable drawable, GL gl) {

		// 0,0
		gl.glViewport(0, 0, screenWidth / 2, screenHeight / 2);
		gl.glLoadIdentity();
		gl.glScissor(0, 0, screenWidth / 2, screenHeight / 2);
		gl.glEnable(GL.GL_SCISSOR_TEST);
		gl.glMatrixMode(GL.GL_MODELVIEW);
		display(drawable, gl);

		// 1,0
		gl.glViewport(screenWidth / 2, 0, screenWidth, screenHeight / 2);
		gl.glLoadIdentity();
		gl.glScissor(screenWidth / 2, 0, screenWidth, screenHeight / 2);
		gl.glEnable(GL.GL_SCISSOR_TEST);
		gl.glMatrixMode(GL.GL_MODELVIEW);
		display(drawable, gl);

		// 0,1
		gl.glViewport(0, screenHeight / 2, screenWidth / 2, screenHeight);
		gl.glLoadIdentity();
		gl.glScissor(0, screenHeight / 2, screenWidth / 2, screenHeight);
		gl.glEnable(GL.GL_SCISSOR_TEST);
		gl.glMatrixMode(GL.GL_MODELVIEW);
		display(drawable, gl);

		// 1,1
		gl.glViewport(screenWidth / 2, screenHeight / 2, screenWidth,
				screenHeight);
		gl.glLoadIdentity();
		gl.glScissor(screenWidth / 2, screenHeight / 2, screenWidth,
				screenHeight);
		gl.glEnable(GL.GL_SCISSOR_TEST);
		gl.glMatrixMode(GL.GL_MODELVIEW);
		display(drawable, gl);

	}

	/**
	 * display(GLAutoDrawable) is called upon whenever OpenGL is ready to draw a
	 * new frame and handles all of the drawing.
	 * <p>
	 * Implemented through GLEventListener. In order to draw everything needed,
	 * it iterates through MazeRunners' list of visibleObjects. For each
	 * visibleObject, this method calls the object's display(GL) function, which
	 * specifies how that object should be drawn. The object is passed a
	 * reference of the GL context, so it knows where to draw.
	 */
	public void display(GLAutoDrawable drawable, GL gl) {

		ChangeGL.GLto3D(gl);

		gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
		gl.glLoadIdentity();

		GLU glu = new GLU();
		GLUT glut = new GLUT();

		// Calculating time since last frame.
		Calendar now = Calendar.getInstance();
		long currentTime = now.getTimeInMillis() - startTime;

		int deltaTime = (int) (currentTime - previousTime);
		previousTime = currentTime;

		if (deltaTime > 33) {
			deltaTime = 0;
		}
		// time = previousTime-startTime;

		// this.time;

		// System.out.println(previousTime);s

		// Update any movement since last frame.
		updateMovement(deltaTime, drawable);
		updateCamera();

		// gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);

		gl.glLoadIdentity();
		glu.gluLookAt(camera.getLocationX(), camera.getLocationY(),
				camera.getLocationZ(), camera.getVrpX(), camera.getVrpY(),
				camera.getVrpZ(), camera.getVuvX(), camera.getVuvY(),
				camera.getVuvZ());

		// gl.glLoadIdentity();

		// gl.glViewport(0, 0, screenWidth/2, screenHeight/2);
		// gl.glScissor(0,0,screenWidth/2,screenHeight/2);
		// gl.glEnable(GL.GL_SCISSOR_TEST);

		// Display all the visible objects of MazeRunner.
		for (Iterator<VisibleObject> it = visibleObjects.iterator(); it
				.hasNext();) {
			it.next().display(gl);
		}

		gl.glDisable(GL.GL_CULL_FACE);
		PlayerState.getState(Player.playerStateInt).displayItem(gl);

		portal1.displayPortal(glut, gl);
		portal2.displayPortal(glut, gl);
		gl.glEnable(GL.GL_CULL_FACE);
		portal1.calcPortaltoPlayer(player);
		portal2.calcPortaltoPlayer(player);
		// portal1.createCamera(glut, gl);
		// portal2.createCamera(glut, gl);
		gl.glLoadIdentity();
		// Flush the OpenGL buffer.

		gl.glFlush();

	}

	/**
	 * reshape(GLAutoDrawable, int, int, int, int, int) is called upon whenever
	 * the viewport changes shape, to update the viewport setting accordingly.
	 * <p>
	 * Implemented through GLEventListener. This mainly happens when the window
	 * changes size, thus changing the canvas (and the viewport that OpenGL
	 * associates with it). It adjust the projection matrix to accomodate the
	 * new shape.
	 */
	/*
	 * public void reshape(GLAutoDrawable drawable, int x, int y, int width, int
	 * height) { GL gl = drawable.getGL(); GLU glu = new GLU();
	 * 
	 * // Setting the new screen size and adjusting the viewport. screenWidth =
	 * width; screenHeight = height; gl.glViewport(0, 0, screenWidth,
	 * screenHeight); // VOOR PORTAL!!!!!!!
	 * 
	 * 
	 * 
	 * // Set the new projection matrix. gl.glMatrixMode(GL.GL_PROJECTION);
	 * gl.glLoadIdentity(); glu.gluPerspective(60, screenWidth / screenHeight,
	 * .1, 200); gl.glMatrixMode(GL.GL_MODELVIEW); }
	 */

	/*
	 * **********************************************
	 * * Methods * **********************************************
	 */

	/**
	 * updateCamera() updates the camera position and orientation.
	 * <p>
	 * This is done by copying the locations from the Player, since MazeRunner
	 * runs on a first person view.
	 */

	private void updateCamera() {
		camera.setLocationX(player.getLocationX());
		camera.setLocationY(player.getLocationY());
		camera.setLocationZ(player.getLocationZ());
		camera.setHorAngle(player.getHorAngle());
		camera.setVerAngle(player.getVerAngle());
		camera.calculateVRP();
	}

	public static Player getPlayer() {
		return player;
	}

	/*
	 * **********************************************
	 * * Main * **********************************************
	 */
	/**
	 * Program entry point
	 * 
	 * @param args
	 */

	// Loads all the texture and stores them into the memory. We have to keep
	// track of the order ourselves.
	// Right now, it is stored like this:
	// 1: earthTexture
	// 2: wallTexture
	// 3: roofTexture

	// 4: trapHolderTexture

	public void loadTextures(GL gl) {
		gl.glEnable(GL.GL_TEXTURE_2D);
		try {
			String currentdir = System.getProperty("user.dir");
			String filename = "\\textures\\texture.jpg";

			filename = currentdir + filename;
			File file2 = new File(filename);
			TextureData data2 = TextureIO.newTextureData(file2, false,

			"jpg");
			earthTexture = TextureIO.newTexture(data2);
		} catch (IOException exc) {
			System.out.println("niet gevonden - texture");
			exc.printStackTrace();
			System.exit(1);
		}

		try {
			String currentdir = System.getProperty("user.dir");
			String filename = "\\textures\\walltexture2.jpg";

			filename = currentdir + filename;
			File file1 = new File(filename);
			// InputStream stream =
			// getClass().getResourceAsStream("texture.jpg");
			TextureData data1 = TextureIO.newTextureData(file1, false,

			"jpg");
			wallTexture = TextureIO.newTexture(data1);
		} catch (IOException exc) {
			System.out.println("niet gevonden - walltexture2");
			exc.printStackTrace();
			System.exit(1);
		}

		try {
			String currentdir = System.getProperty("user.dir");
			String filename = "\\textures\\rooftexture.jpg";

			filename = currentdir + filename;
			File file3 = new File(filename);
			// InputStream stream =
			// getClass().getResourceAsStream("texture.jpg");
			TextureData data3 = TextureIO.newTextureData(file3, false,

			"jpg");
			roofTexture = TextureIO.newTexture(data3);
		} catch (IOException exc) {
			System.out.println("niet gevonden - roofTexture");
			exc.printStackTrace();
			System.exit(1);
		}
		try {
			String currentdir = System.getProperty("user.dir");
			String filename = "\\textures\\trapHolderTexture.jpg";

			filename = currentdir + filename;
			File file4 = new File(filename);
			// InputStream stream =
			// getClass().getResourceAsStream("texture.jpg");
			TextureData data4 = TextureIO.newTextureData(file4, false,

			"jpg");
			trapHolderTexture = TextureIO.newTexture(data4);
		} catch (IOException exc) {
			System.out.println("niet gevonden - trapHolderTexture");
			exc.printStackTrace();
			System.exit(1);
		}
		try {
			String currentdir = System.getProperty("user.dir");
			String filename = "\\textures\\oildrum_col.jpg";

			filename = currentdir + filename;
			File file5 = new File(filename);
			// InputStream stream =
			// getClass().getResourceAsStream("texture.jpg");
			TextureData data5 = TextureIO.newTextureData(file5, false,

			"jpg");
			oildrumTexture = TextureIO.newTexture(data5);
		} catch (IOException exc) {
			System.out.println("niet gevonden - oildrumTexture");
			exc.printStackTrace();
			System.exit(1);
		}
		try {
			String currentdir = System.getProperty("user.dir");
			String filename = "\\textures\\woodtexture.jpg";

			filename = currentdir + filename;
			File file5 = new File(filename);
			// InputStream stream =
			// getClass().getResourceAsStream("texture.jpg");
			TextureData data5 = TextureIO.newTextureData(file5, false,

			"jpg");
			woodTexture = TextureIO.newTexture(data5);
		} catch (IOException exc) {
			System.out.println("niet gevonden - woodTexture");
			exc.printStackTrace();
			System.exit(1);
		}

		gl.glDisable(GL.GL_TEXTURE_2D);

	}

	public void loadModels(GL gl) {
		gl.glEnable(GL.GL_TEXTURE_2D);
		try {
			String currentdir = System.getProperty("user.dir");
			String filename = currentdir + "\\models\\oildrum.obj";
			spookyModel = OBJLoader.loadTexturedModel(new File(filename));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			String currentdir = System.getProperty("user.dir");
			String filename = currentdir + "\\models\\m21.obj";
			m21Model = OBJLoader.loadTexturedModel(new File(filename));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			String currentdir = System.getProperty("user.dir");
			String filename = currentdir + "\\models\\medieval-torch.obj";
			torchModel = OBJLoader.loadTexturedModel(new File(filename));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void updateMovement(int deltaTime, GLAutoDrawable drawable) {
		double previousX = player.getLocationX();
		double previousY = player.getLocationY();
		double previousZ = player.getLocationZ();

		player.update(deltaTime, drawable);

		int currentMazeID = level.getCurrentMaze(player);
		if (currentMazeID != -1) {
			Maze currentMaze = level.getMaze(currentMazeID);

			for (int i = 0; i < currentMaze.itemList.size(); i++) {
				Item item = currentMaze.itemList.get(i);
				if (item.touches(player)) {
					if (item instanceof TrapHolder) {
						Player.nrOfTraps++;
						visibleObjects.remove(currentMaze.itemList.get(i));
						currentMaze.itemList.remove(i);
					}
					if (item instanceof BulletHolder){
						Player.nrOfBullets += ((BulletHolder)item).getAmount();
						visibleObjects.remove(currentMaze.itemList.get(i));
						currentMaze.itemList.remove(i);
					}
				}
			}
		}
		for (int e = 0; e < enemyList.size(); e++) {
			Enemy enemy = enemyList.get(e);
			currentMazeID = level.getCurrentMaze(enemy);
			if (currentMazeID != -1) {
				Maze currentMaze = level.getMaze(currentMazeID);
				// double enemyX = enemy.getX();
				// double enemyZ = enemy.getZ();
				enemy.update(deltaTime, player);
				for (int i = 0; i < currentMaze.itemList.size(); i++) {
					Item item = currentMaze.itemList.get(i);
					if (item.touches(enemy) && item	instanceof TrapDropped) {
						visibleObjects.remove(enemy);
						enemyList.remove(enemy);
						visibleObjects.remove(item);
						currentMaze.itemList.remove(item);
					}
				}
			}

		}
		for (int bNr = 0; bNr < bulletList.size(); bNr++) {
			Bullet b = bulletList.get(bNr);
			b.update(deltaTime);
			int i = MazeRunner.level.getCurrentMaze(b);
			if (i != -1) {
				Maze maze = MazeRunner.level.mazelist.get(i);
				if (b.locationY < mazeY + 0.1) {
					bulletList.remove(b);
					visibleObjects.remove(b);
				}
				// Check for collision with wall
				if (MazeRunner.level.collides(b, 0)[0]) {
					if (maze.textureMatrix[maze
							.coordToMatrixElement(b.locationX - maze.mazeX)][maze
							.coordToMatrixElement(b.locationZ - maze.mazeZ)] == 2) {
						maze.maze[maze.coordToMatrixElement(b.locationX
								- maze.mazeX)][maze
								.coordToMatrixElement(b.locationZ - maze.mazeZ)] = -1;
						bulletList.remove(b);
						visibleObjects.remove(b);
					} else {
						bulletList.remove(b);
						visibleObjects.remove(b);
					}
				}
			}
			for (int eNr = 0; eNr < enemyList.size(); eNr++) {
				Enemy e = enemyList.get(eNr);
				double diffX = b.getGlobalX() - e.getGlobalX();
				double diffY = b.getGlobalY() - e.getGlobalY();
				double diffZ = b.getGlobalZ() - e.getGlobalZ();

				if (e instanceof EnemySmart
						&& Math.sqrt(diffX * diffX + diffY * diffY + diffZ
								* diffZ) < 1) {
					visibleObjects.remove(e);
					visibleObjects.remove(b);
					bulletList.remove(b);
					enemyList.remove(e);
					break;
				}
			}

		}
		for (int rNr = 0; rNr < roofList.size(); rNr++){
			Roof r = roofList.get(rNr);
			if(!r.isOnWalls()){
				r.locationY-=0.005*deltaTime;
				Maze maze = level.getMaze(level.getCurrentMaze(r));
				if(r.locationY < maze.mazeY+0.5){
					roofList.remove(r);
					visibleObjects.remove(r);
					for (int eNr = 0; eNr < enemyList.size(); eNr++ ){
						Enemy e = enemyList.get(eNr);
						if(e instanceof EnemySmart && maze.coordToMatrixElement(e.getGlobalX())==r.matrixX && maze.coordToMatrixElement(e.getGlobalZ()) == r.matrixZ){
							enemyList.remove(e);
							visibleObjects.remove(e);
						}
					}
					if(maze.coordToMatrixElement(player.getGlobalX())==r.matrixX && maze.coordToMatrixElement(player.getGlobalZ()) == r.matrixZ){
						player.reset();
						for(int e = 0; e < MazeRunner.enemyList.size(); e++){
							MazeRunner.enemyList.get(e).reset();
						}						
					}
				}
			}
		}

		if (Player.canTeleport) {
			portal1.checkteleportation(player, (float) previousX,
					(float) previousY, (float) previousZ);
			portal2.checkteleportation(player, (float) previousX,
					(float) previousY, (float) previousZ);
		} else {
			Player.canTeleport = true;
		}
		// if (maze.isExit(player.locationX, player.locationZ)) {
		// Sound.applause.play();
		// player.locationX = maze.SQUARE_SIZE + maze.SQUARE_SIZE / 2;
		// player.locationY = maze.SQUARE_SIZE / 2;
		// player.locationZ = maze.SQUARE_SIZE + maze.SQUARE_SIZE / 2;
		// try {
		// maze.loadMaze("level1");
		// } catch (FileNotFoundException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }
		// }
	}

}
