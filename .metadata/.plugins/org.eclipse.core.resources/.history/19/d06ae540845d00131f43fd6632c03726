package engine;

import javax.media.opengl.GL;

public class Wall {

	private final static double DOOR_WIDTH = 1.5;
	private final static double DOOR_HEIGHT = 3;

	public static void paintDoorZFromQuad(GL gl, double h, double ITEM_HEIGHT,
			double WALL_LENGTH, double WALL_WIDTH) {
		gl.glDisable(GL.GL_CULL_FACE);

		gl.glPolygonMode(GL.GL_FRONT_AND_BACK, GL.GL_FILL);
		gl.glBindTexture(GL.GL_TEXTURE_2D, 2);
		gl.glBegin(GL.GL_QUAD_STRIP);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(0.0, h, 0.0);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT + h, 0.0);
		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d(0.0, h, WALL_WIDTH);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT + h, WALL_WIDTH);
		gl.glNormal3d(-1, 0, 0);
		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d((WALL_LENGTH - DOOR_WIDTH) / 2, h, WALL_WIDTH);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d((WALL_LENGTH - DOOR_WIDTH) / 2, ITEM_HEIGHT + h,
				WALL_WIDTH);
		gl.glNormal3d(0, 0, 1);
		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d((WALL_LENGTH - DOOR_WIDTH) / 2, h, 0.0);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d((WALL_LENGTH - DOOR_WIDTH) / 2, ITEM_HEIGHT + h, 0.0);
		gl.glNormal3d(1, 0, 0);
		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(0.0, h, 0.0);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT + h, 0.0);
		gl.glNormal3d(0, 0, -1);
		gl.glEnd();

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(WALL_LENGTH, h, 0.0);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(WALL_LENGTH, ITEM_HEIGHT + h, 0.0);
		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d(WALL_LENGTH, h, WALL_WIDTH);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d(WALL_LENGTH, ITEM_HEIGHT + h, WALL_WIDTH);
		gl.glNormal3d(1, 0, 0);
		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d((WALL_LENGTH + DOOR_WIDTH) / 2, h, WALL_WIDTH);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d((WALL_LENGTH + DOOR_WIDTH) / 2, ITEM_HEIGHT + h,
				WALL_WIDTH);
		gl.glNormal3d(0, 0, 1);
		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d((WALL_LENGTH + DOOR_WIDTH) / 2, h, 0.0);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d((WALL_LENGTH + DOOR_WIDTH) / 2, ITEM_HEIGHT + h, 0.0);
		gl.glNormal3d(-1, 0, 0);
		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(WALL_LENGTH, h, 0.0);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(WALL_LENGTH, ITEM_HEIGHT + h, 0.0);
		gl.glNormal3d(0, 0, -1);
		gl.glEnd();

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d((WALL_LENGTH - DOOR_WIDTH) / 2, ITEM_HEIGHT + h, 0.0);
		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d((WALL_LENGTH + DOOR_WIDTH) / 2, ITEM_HEIGHT + h, 0.0);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d((WALL_LENGTH - DOOR_WIDTH) / 2, DOOR_HEIGHT + h, 0.0);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d((WALL_LENGTH + DOOR_WIDTH) / 2, DOOR_HEIGHT + h, 0.0);
		gl.glNormal3d(0, 0, -1);
		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d((WALL_LENGTH - DOOR_WIDTH) / 2, DOOR_HEIGHT + h,
				WALL_WIDTH);
		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d((WALL_LENGTH + DOOR_WIDTH) / 2, DOOR_HEIGHT + h,
				WALL_WIDTH);
		gl.glNormal3d(0, 0, 1);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d((WALL_LENGTH - DOOR_WIDTH) / 2, ITEM_HEIGHT + h,
				WALL_WIDTH);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d((WALL_LENGTH + DOOR_WIDTH) / 2, ITEM_HEIGHT + h,
				WALL_WIDTH);
		gl.glNormal3d(0, -1, 0);
		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d((WALL_LENGTH - DOOR_WIDTH) / 2, ITEM_HEIGHT + h, 0.0);
		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d((WALL_LENGTH + DOOR_WIDTH) / 2, ITEM_HEIGHT + h, 0.0);
		gl.glNormal3d(0, 1, 0);

		gl.glEnd();

		gl.glEnable(GL.GL_CULL_FACE);

	}

	private void paintDebrisXFromQuad(GL gl) {
		gl.glDisable(GL.GL_CULL_FACE);
		gl.glBindTexture(GL.GL_TEXTURE_2D, 6);
		gl.glBegin(GL.GL_QUAD_STRIP);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(0.0, 0, 0.0);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT / 10, 0.0);

		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d(WALL_WIDTH, 0, 0.0);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d(WALL_WIDTH, ITEM_HEIGHT / 10, 0.0);
		gl.glNormal3d(0, 0, -1);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(WALL_WIDTH, 0, WALL_LENGTH);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(WALL_WIDTH, ITEM_HEIGHT / 10, WALL_LENGTH);
		gl.glNormal3d(1, 0, 0);

		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d(0.0, 0, WALL_LENGTH);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT / 10, WALL_LENGTH);
		gl.glNormal3d(0, 0, 1);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(0.0, 0, 0.0);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT / 10, 0.0);
		gl.glNormal3d(-1, 0, 0);

		gl.glEnd();
		gl.glEnable(GL.GL_CULL_FACE);

	}

	private void paintDebrisColumnFromQuad(GL gl) {
		gl.glDisable(GL.GL_CULL_FACE);
		gl.glBindTexture(GL.GL_TEXTURE_2D, 6);
		gl.glBegin(GL.GL_QUAD_STRIP);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(0.0, 0, 0.0);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT / 10, 0.0);

		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d(COLUMN_WIDTH, 0, 0.0);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d(COLUMN_WIDTH, ITEM_HEIGHT / 10, 0.0);
		gl.glNormal3d(0, 0, -1);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(COLUMN_WIDTH, 0, COLUMN_WIDTH);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(COLUMN_WIDTH, ITEM_HEIGHT / 10, COLUMN_WIDTH);
		gl.glNormal3d(1, 0, 0);

		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d(0.0, 0, COLUMN_WIDTH);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT / 10, COLUMN_WIDTH);
		gl.glNormal3d(0, 0, -1);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(0.0, 0, 0.0);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT / 10, 0.0);
		gl.glNormal3d(-1, 0, 0);

		gl.glEnd();
		gl.glEnable(GL.GL_CULL_FACE);

	}

	private void paintDebrisZFromQuad(GL gl) {
		gl.glDisable(GL.GL_CULL_FACE);
		gl.glBindTexture(GL.GL_TEXTURE_2D, 6);
		gl.glBegin(GL.GL_QUAD_STRIP);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(0.0, 0, 0.0);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT / 10, 0.0);

		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d(WALL_LENGTH, 0, 0.0);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d(WALL_LENGTH, ITEM_HEIGHT / 10 + 0, 0.0);
		gl.glNormal3d(0, 0, -1);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(WALL_LENGTH, 0, WALL_WIDTH);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(WALL_LENGTH, ITEM_HEIGHT / 10, WALL_WIDTH);
		gl.glNormal3d(1, 0, 0);

		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d(0.0, 0, WALL_WIDTH);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT / 10, WALL_WIDTH);
		gl.glNormal3d(0, 0, 1);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(0.0, 0, 0.0);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT / 10, 0.0);
		gl.glNormal3d(-1, 0, 0);
		gl.glEnd();
		gl.glEnable(GL.GL_CULL_FACE);

	}

	private void paintSingleFloorTile(GL gl, double size_x, double size_z) {

		float wallColour[] = { 0.0f, 0.0f, 0.0f, 1.0f }; // The floor is blue.
		gl.glMaterialfv(GL.GL_FRONT, GL.GL_DIFFUSE, wallColour, 0); // Set the
																	// materials
																	// used by
																	// the
																	// floor.
		// Apply texture.
		gl.glBindTexture(GL.GL_TEXTURE_2D, 1);

		// Calculate coordinates and the corresponding texture coordinates.
		gl.glNormal3d(0, 1, 0);
		gl.glBegin(GL.GL_QUADS);
		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(0, 0, 0);
		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d(0, 0, size_z);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(size_x, 0, size_z);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d(size_x, 0, 0);
		gl.glEnd();

	}

	// Paints a roof using a trianglefan
	private void paintRoof(GL gl, double h) {
		gl.glDisable(GL.GL_CULL_FACE);

		gl.glPolygonMode(GL.GL_FRONT_AND_BACK, GL.GL_FILL);
		gl.glBindTexture(GL.GL_TEXTURE_2D, 3);
		gl.glBegin(GL.GL_TRIANGLE_FAN);

		gl.glTexCoord2d(0.5, 1.0);
		gl.glVertex3d(WALL_LENGTH / 2, h + 2, WALL_LENGTH / 2);
		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(WALL_LENGTH, h, WALL_LENGTH);
		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d(0.0, h, WALL_LENGTH);
		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(0.0, h, 0.0);
		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d(WALL_LENGTH, h, 0.0);
		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(WALL_LENGTH, h, WALL_LENGTH);
		gl.glTexCoord2d(1.0, 0.0);
		gl.glEnd();
		gl.glEnable(GL.GL_CULL_FACE);
	}

	// Paints a wall in the z-direction
	private void paintWallZFromQuad(GL gl, double h, int i, int j) {
		gl.glPolygonMode(GL.GL_FRONT_AND_BACK, GL.GL_FILL);
		if (textureMatrix[i][j] == 1) {
			gl.glBindTexture(GL.GL_TEXTURE_2D, 2);
		} else if (textureMatrix[i][j] == 2) {
			gl.glBindTexture(GL.GL_TEXTURE_2D, 6);
		}
		gl.glBegin(GL.GL_QUAD_STRIP);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(0.0, h, 0.0);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT + h, 0.0);

		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d(WALL_LENGTH, h, 0.0);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d(WALL_LENGTH, ITEM_HEIGHT + h, 0.0);
		gl.glNormal3d(0, 0, -1);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(WALL_LENGTH, +h, WALL_WIDTH);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(WALL_LENGTH, ITEM_HEIGHT + h, WALL_WIDTH);
		gl.glNormal3d(1, 0, 0);

		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d(0.0, h, WALL_WIDTH);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT + h, WALL_WIDTH);
		gl.glNormal3d(0, 0, 1);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(0.0, h, 0.0);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT + h, 0.0);
		gl.glNormal3d(-1, 0, 0);

		gl.glEnd();
	}

	// Paints a wall in the X-direction
	private void paintWallXFromQuad(GL gl, double h, int i, int j) {
		gl.glPolygonMode(GL.GL_FRONT_AND_BACK, GL.GL_FILL);
		if (textureMatrix[i][j] == 1) {
			gl.glBindTexture(GL.GL_TEXTURE_2D, 2);
		} else if (textureMatrix[i][j] == 2) {
			gl.glBindTexture(GL.GL_TEXTURE_2D, 6);
		}
		gl.glBegin(GL.GL_QUAD_STRIP);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(0.0, h, 0.0);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT + h, 0.0);

		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d(WALL_WIDTH, h, 0.0);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d(WALL_WIDTH, ITEM_HEIGHT + h, 0.0);
		gl.glNormal3d(0, 0, -1);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(WALL_WIDTH, +h, WALL_LENGTH);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(WALL_WIDTH, ITEM_HEIGHT + h, WALL_LENGTH);
		gl.glNormal3d(1, 0, 0);

		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d(0.0, h, WALL_LENGTH);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT + h, WALL_LENGTH);
		gl.glNormal3d(0, 0, 1);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(0.0, h, 0.0);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT + h, 0.0);
		gl.glNormal3d(-1, 0, 0);

		gl.glEnd();
	}

	// Paints a column
	private void paintColumnFromQuad(GL gl, double h, int i, int j) {
		gl.glPolygonMode(GL.GL_FRONT_AND_BACK, GL.GL_FILL);
		if (textureMatrix[i][j] == 1) {
			gl.glBindTexture(GL.GL_TEXTURE_2D, 2);
		} else if (textureMatrix[i][j] == 2) {
			gl.glBindTexture(GL.GL_TEXTURE_2D, 6);
		}
		gl.glBegin(GL.GL_QUAD_STRIP);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(0.0, h, 0.0);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT + h, 0.0);

		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d(COLUMN_WIDTH, h, 0.0);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d(COLUMN_WIDTH, ITEM_HEIGHT + h, 0.0);
		gl.glNormal3d(0, 0, -1);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(COLUMN_WIDTH, +h, COLUMN_WIDTH);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(COLUMN_WIDTH, ITEM_HEIGHT + h, COLUMN_WIDTH);
		gl.glNormal3d(1, 0, 0);

		gl.glTexCoord2d(1.0, 0.0);
		gl.glVertex3d(0.0, h, COLUMN_WIDTH);
		gl.glTexCoord2d(1.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT + h, COLUMN_WIDTH);
		gl.glNormal3d(0, 0, -1);

		gl.glTexCoord2d(0.0, 0.0);
		gl.glVertex3d(0.0, h, 0.0);
		gl.glTexCoord2d(0.0, 1.0);
		gl.glVertex3d(0.0, ITEM_HEIGHT + h, 0.0);
		gl.glNormal3d(-1, 0, 0);

		gl.glEnd();
	}
}
