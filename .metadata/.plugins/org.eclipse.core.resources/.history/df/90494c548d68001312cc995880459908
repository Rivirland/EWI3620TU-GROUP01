package engine;

import java.util.ArrayList;

public class GeneticAlgorithm {
	private ArrayList<Maze> mazes;

	public GeneticAlgorithm(ArrayList<Maze> mazelist) {
		mazes = mazelist;
	}

	public void assignPortalID() {
		int i = 0;
		for (Portal p : MazeRunner.portalList) {
			p.setPortalID(i);
			i++;
		}
	}
	
	public void connectPortals(){
		
	}
	
	public void solve(){
		double[][] distanceMatrix = calcDistances();
		
	}

	private double[][] calcDistances() {
		double[][] res = new double[mazes.size()][mazes.size()];
		for(int i = 0; i<mazes.size(); i++){
			for (int j = 0; j < i; j++){
				double distance = Integer.MAX_VALUE;
				for(int x = 0; x < 2; x++){
					for (int y = 0; y < 2; y++){
						float dX = MazeRunner.portalList.get(i*2+x).getX()-MazeRunner.portalList.get(j*2+y).getX();
						float dZ = MazeRunner.portalList.get(i*2+x).getZ()-MazeRunner.portalList.get(j*2+y).getZ();
						if(Math.sqrt(dX*dX + dZ*dZ) < distance){
							distance = Math.sqrt(dX*dX + dZ*dZ);
							System.out.println("distance between portals:" + distance);
						}
					}
				}
				res[i][j] = distance;
				res[j][i] = distance;
				System.out.println("Distance: " + res[i][j]);
			}
		}
		return res;
	}

}
