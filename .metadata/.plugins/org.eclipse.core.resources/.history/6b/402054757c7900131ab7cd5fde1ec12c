package engine;

import java.util.ArrayList;

import javax.media.opengl.GL;
import javax.media.opengl.glu.GLU;

import menu.Main;

import com.sun.opengl.util.GLUT;

public class Portal {

	// coordinaten van de portal
	private float x;
	private float y;
	private float z;
	public int portalID;
	public int portalConnectionID;
	
	private Camera portalcamera;
	
	private static int amountmazep = 2;
	private static int[] activep;

	// eigenschappen van de portal
	private static float breedte = 2;
	private static float hoogte = 5;
	private int facingdirection;

	// een waarde {0,... 3} de portal bevindt zich altijd in het xz vlak,
	// loodrecht op het grondvlak
	// 0 = positieve x richting, 1 = positieve z richting enz....
	
	private GLU glu=new GLU();

	private Portal toportal;
	private boolean connected;
	// afstand tussen portal en de speler, nodig voor het berekenen van de
	// camera positie
	private float dx, dy, dz;
	// private float playerhorAngle, playerverAngle;

	boolean teleportation;

	/*
	 * Creates a Portal object that has an position and a facing direction
	 */
	public Portal(float x, float y, float z, int facingdirection) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.facingdirection = facingdirection % 4;
		this.setisConnected(false);
		this.portalcamera=new Camera(0,0,0, facingdirection*-90,0);
		
	}

	public Portal(float x, float y, float z, int facingdirection, int ID, int cID) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.facingdirection = facingdirection % 4; // als hoger dan 3 dan komt											// het toch goed
		this.setisConnected(false);
		this.portalID = ID;
		this.portalConnectionID = cID;
	}
	/**
	 * Portals vinden voor het level waar de player nu in zit, dit werkt omdat de levels in 
	 * zelfde sequentie worden geladen als de portals
	 */
	public static void activePortaldisplay(GL gl){
		
		// finding the activeportals, portals are identified with an integer number
		int mazeID = MazeRunner.level.getCurrentMaze(MazeRunner.player);
		if (mazeID != -1){
		activep = new int[amountmazep]; 
		for(int i=0; i<amountmazep; i++){
			activep[i] = mazeID*amountmazep+i;
		}
		
		// the active portals are being calculated relative to the player, and both are sequentially being stencilled
		for (int i=0; i < amountmazep; i++){
		//MazeRunner.portalList.get(activep[i]).calcPortaltoPlayer(MazeRunner.getPlayer());
		//stencil(gl, MazeRunner.portalList.get(activep[i]), i);
		}
		
		//TODO tijdelijk om 1 keer stencil te testen
		stencil(gl, MazeRunner.portalList.get(activep[0]), 0);
		displayInactivePortals(gl, MazeRunner.portalList);
	}
	}
	public static void stencil (GL gl, Portal p, int num){
		
		GLUT glut=new GLUT();
		
		// enable stenciltest
		gl.glEnable(GL.GL_STENCIL_TEST);
		 
		 // temporarily disable colormask because what is stencilled does not need to have color
		 gl.glColorMask(false,false,false,false);
		 gl.glDepthMask(false);
		 
		 //glstencilfunc compares the ref and mask value with the stencilpixel and mask value and 
		 // when it passes the pixel is passed to the next test or rasterization process(glstencilop)
		 
		 // first parameter is the test function
		 // second is the stencil value that is being compared
		 // third is mask: a mask applied to both ref and the stencil pixel; you can use 0xFF (if you have 8 bitplanes) to disable the mask
		 gl.glStencilFunc(GL.GL_NEVER, 1, 0xff);
		 
		 //1. sfail: the test from glStencilFunc failed
		 //2. dpfail: the test from glStencilFunc passed, but the depth buffer test failed
		 //3. dppass: the test from glStencilFunc passed, and the depth buffer passed or is disabled
		 gl.glStencilOp(GL.GL_REPLACE, GL.GL_KEEP, GL.GL_KEEP);
		 
		 //control the bits of an operation
		 gl.glStencilMask(0xff);
		 // clear the stencil buffer so everything else is unaffected
		 gl.glClear(GL.GL_STENCIL_BUFFER_BIT); 
		  
		 // Teken.rechthoek(gl, x1, y1, x2, y2);
	
		 // portal die getest wordt op view
		 //p.stencilDisplay(gl);
		 
		 //TODO om te testen of het werkt, moet stencilDisplay worden
		 //p.displayPortal(glut, gl);
		 
		  
		  gl.glColorMask(true,true,true,true);
		  gl.glDepthMask(true);
		  
		  
		//TODO hier moet de view voor de portal gegeven worden
		  
		  
		  
		  gl.glStencilMask(0);
		  
		  // if buffervalue is equal to 0, then it gets overwritten
		  gl.glStencilFunc(GL.GL_EQUAL, 0, 0xFF);
		  
		  // if buffervalue equal to 1 then it gets overwritten
		  gl.glStencilFunc(GL.GL_EQUAL, 1, 0xFF);
		  
		  portalView(gl, p.portalcamera);
		 // gl.glDisable(GL.GL_STENCIL_TEST);
		 //displayInactivePortals(gl, MazeRunner.portalList);
	}

	public void stencilDisplay(GL gl){
		
		
		gl.glPushMatrix();
		gl.glTranslatef(this.x, (float) (this.y), this.z);

		gl.glRotatef(facingdirection * 90, 0, 1, 0);

		gl.glDisable(GL.GL_CULL_FACE);
		gl.glBegin(GL.GL_QUADS);

		gl.glVertex3d(0, 0, -breedte * 0.5);
		gl.glVertex3d(0, hoogte, -breedte * 0.5);
		gl.glVertex3d(0, hoogte, breedte * 0.5);
		gl.glVertex3d(0, 0, breedte * 0.5);
		
		gl.glEnd();
		
	}
	
	public static void portalView(GL gl, Camera portalcamera) {
		ArrayList<Portal> portalList=MazeRunner.portalList;
		GLU glu=new GLU();
		GLUT glut = new GLUT();
		gl.glViewport(0, 0, MazeRunner.getScreenWidth(), MazeRunner.getScreenHeight());
		//gl.glLoadIdentity();
		//glu.gluLookAt(portalcamera.getLocationX(), portalcamera.getLocationY(), portalcamera.getLocationZ(), portalcamera.getVrpX(), portalcamera.getVrpY(), portalcamera.getVrpZ(), portalcamera.getVuvX(), portalcamera.getVuvY(), portalcamera.getVuvZ());
		//MazeRunner.visibleIterator(gl);
		
			
//			for (int i = 0; i < portalList.size(); i++) {
//				boolean check = true;
//				for (int j=0; j<amountmazep ; j++){
//					if(i == activep[j]){
//						check=false;
//					}}
//					if (check){
//						portalList.get(i).displayPortal(glut, gl);
//				}
//			}
		}
		
	public static void displayInactivePortals(GL gl,ArrayList<Portal> portalList){
		GLUT glut = new GLUT();
		for (int i = 0; i < portalList.size(); i++) {
			boolean check = true;
			for (int j=0; j<amountmazep ; j++){
				if(i == activep[j]){
					check=false;
				}}
				if (check){
					portalList.get(i).displayPortal(glut, gl);
			}
		}
	}
		
	
	public static void connectPortals(int[] mazes) {
		if (MazeRunner.portalList.size() > 0) {
			System.out.println("Number of portals detected: " + MazeRunner.portalList.size());
			for (int i = 0; i < mazes.length - 1; i++) {
				portalConnection(MazeRunner.portalList.get(i * 2 + 1), MazeRunner.portalList.get((i + 1) * 2));
		}
			portalConnection(MazeRunner.portalList.get(mazes.length * 2 - 1), MazeRunner.portalList.get(0));
		}
	}



	public void toteleport(Player player, boolean teleportation) {
		if (teleportation) {
			
			
			player.setLocationX(toportal.getX());
			player.setLocationY(toportal.getY() + 2.5);
			player.setLocationZ(toportal.getZ());
			player.setLocationY(player.getLocationY());
			// player.setLocationY(toportal.getY());

			// de kijkrichting wordt het verschil in hoek tussen de twee
			// portalen + de huidige kijkrichting

			// verschil in facing direction
			// facingdirection - toportal.getFacingdirection() *90

			player.setHorAngle(player.getHorAngle() + (facingdirection - toportal.getFacingdirection()) * 90);
			teleportation = false;
		}
	}

	public void setPortalID(int i) {
		portalID = i;
	}

	// deze functie moet voor een bepaalde portal in klasse MazeRunner, methode
	// updatemovement
	public void checkteleportation(Player player, float previousX, float previousY, float previousZ) {

		boolean teleportation = false;
		float playerx = (float) player.getLocationX();
		float playery = (float) player.getLocationY();
		float playerz = (float) player.getLocationZ();

		float range = (float) breedte; // deze waarde wordt de breedte van de
										// portal

		// als de speler van de ene kant van de portal naar de andere is gegaan
		// dan teleporteert hij aan de facingdirection bij de andere portal

		// if()
		if (MazeRunner.level.getCurrentMaze(player) != -1) {
			if (Math.abs(player.locationY - this.y) < 5) {
				if (facingdirection == 0 || facingdirection == 2) {
					if (playerz > this.z - range && playerz < this.z + range) {
						if (previousX < x && playerx > x || previousX > x && playerx < x) {
							teleportation = true;
						}
					}
				} else {
					if (playerx > this.x - range && playerx < this.x + range) {
						if (previousZ < z && playerz > z || previousZ > z && playerz < z) {

							teleportation = true;
							// System.out.println(teleportation);
						}
					}
					// kijken of bij van z< z van portal naar z > z van portal
					// is
					// gegaan terwijl x binnen de boundary is

				}
			}
		}
		// hier wordt toteleport aangeroepen na elke check, als teleportation
		// true is wordt de speler naar de coordinaten van de toportal gestuurd

		toteleport(player, teleportation);

	}

	

	public void displayPortal(GLUT glut, GL gl) {
		//gl.glColor4d(1, 1, 1, 1);

		gl.glPushMatrix();
		
		gl.glClearColor(0, 0, 0, 0);
		gl.glTranslatef(this.x, (float) (this.y), this.z);

		// lineOnScreen(gl, this.x, (float) (this.y+0.5*hoogte), this.z,
		// this.x+5, (float) (this.y+0.5*hoogte), this.z);

		gl.glRotatef(facingdirection * 90, 0, 1, 0);
		//gl.glColor3f(1, 1, 1);
		
		gl.glColor4d(1, 1, 1, 1);
		
		gl.glPolygonMode(GL.GL_FRONT_AND_BACK, GL.GL_FILL);
		gl.glDisable(GL.GL_CULL_FACE);
		gl.glBegin(GL.GL_QUADS);

		gl.glVertex3d(0, 0, -breedte * 0.5);
		gl.glVertex3d(0, hoogte, -breedte * 0.5);
		gl.glVertex3d(0, hoogte, breedte * 0.5);
		gl.glVertex3d(0, 0, breedte * 0.5);
		
		gl.glEnd();
		gl.glPopMatrix();

		/*
		 * gl.glPushMatrix(); gl.glRotatef(facingdirection*90, 0, 1, 0);
		 * gl.glBegin(GL.GL_LINES); gl.glVertex3f(this.x, (float)
		 * (this.y+0.5*hoogte), this.z); gl.glVertex3f(this.x+5, (float)
		 * (this.y+0.5*hoogte), this.z); gl.glEnd(); gl.glPopMatrix();
		 */
		gl.glPushMatrix();
		gl.glColor3f(1,1,1);
		gl.glPolygonMode(GL.GL_FRONT_AND_BACK, GL.GL_FILL);
		// gl.glCullFace(GL.GL_BACK);
		gl.glEnable(GL.GL_CULL_FACE);
		gl.glColor4d(0, 0, 0, 0);
		gl.glPopMatrix();

		// gl.glLoadIdentity();

	}

	public String toString() {
		return "Portal at x=" + x + " y=" + y + " z=" + z + " Connected to: "// p2.toString()
		;
	}

	/**
	 * Checks if two Portals are the same, and therefore cannot be connected
	 * 
	 * @param p1
	 * @param p2
	 * @return
	 */
	public static boolean Equals(Portal p1, Portal p2) {
		// TODO: compare the portals
		return false;
	}

	public void setconnectedTo(Portal p) {
		this.toportal = p;
	}

	public static void portalConnection(Portal p1, Portal p2) {
		if (!Equals(p1, p2)) {
			p1.setconnectedTo(p2);
			p2.setconnectedTo(p1);
			System.out.println("Connected portal: " + p1.portalID + " and portal: " + p2.portalID);
			p1.setisConnected(true);
			p2.setisConnected(true);

			// p1.}
		} else {
			System.out.println("Connected portals cannot be the same portal, dummiexD \n No PortalConnection is made");
		}
	}

	public void calcPortaltoPlayer(Player player) {

		this.dx = (float) (player.getLocationX() - this.x);
		this.dy = (float) (player.getLocationY() - this.y);
		this.dz = (float) (player.getLocationZ() - this.z);
		// this.playerhorAngle = (float) player.getHorAngle();
		// this.playerverAngle = (float) player.getVerAngle();
	}

	// make vector between positions of playerobject and portal object

	public void updateCamera(GLUT glut, GL gl) {
		if (connected) {
			GLU glu = new GLU();
			// de camera die wordt vertoont op p1 staat op evengrote omgekeerde
			// afstand van de facing direction van portal p2 als de speler tot
			// portal p1
			// de camera staat gericht in dezelfde facing direction als de
			// facing direction van p2

			float x = this.toportal.getX() + this.dx;
			float y = this.toportal.getY() + this.dy;
			float z = this.toportal.getZ() + this.dz;
			gl.glPushMatrix();

			// de translatie moet geflipt worden op de facing direction van de
			// portal

			// juiste coordinaat = geflipte coordinaat - portal coordinaat

			gl.glRotatef(facingdirection * -90, 0, 1, 0);
			gl.glTranslatef(x, y, z);

			// voor nu is een wirecube gebruikt om de camera te representeren
			
			glut.glutSolidCube(2);
			gl.glPopMatrix();
			portalcamera.setLocationX(x);
			portalcamera.setLocationY(y);
			portalcamera.setLocationZ(z);	
			portalcamera.calculateVRP();

		}

	}

	// create new camera with the same distance and direction as the camera at
	// p1, but this distance and
	// direction at p2, the opposite way of the normal(the facingdirection) of
	// p2

	// get information of current camera

	// Camera camera1= Camera.get

	// map the new camera on the windowview, and clip the camera on the
	// boundary's of the surface of p1

	// make it so that if the camera at p1 moves or changes direction, this
	// movement is replicated by
	// p2

	public static void Connection(Portal p1) {
		// a new camera is made with the same distance and direction from portal
		// (1) connected to,
		// as the camera at the other portal (portal 2) (see sketch) this
		// position is constantly changed when the
		// the camera moves
		// if the player is transported to the other place, the other camera
		// becomes the current camera
		// that is only clipped on the window, the camera that was the current
		// camera before is clipped
		// on portal 2
	}

	public boolean getisConnected() {
		return connected;
	}

	public void setisConnected(boolean connected) {
		this.connected = connected;
	}

	public float getX() {
		return this.x;
	}

	public float getY() {
		return this.y;
	}

	public float getZ() {
		return this.z;
	}

	public int getFacingdirection() {
		return this.facingdirection;
	}

	public float getPlayerdx() {
		return this.dx;
	}

	public float getPlayerdy() {
		return this.dy;
	}

	public float getPlayerdz() {
		return this.dz;
	}

}
