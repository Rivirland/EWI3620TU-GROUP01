package engine;

import items.Bullet;
import items.BulletHolder;
import items.Exit;
import items.Item;
import items.Roof;
import items.TrapDropped;
import items.TrapDroppedGBS;
import items.TrapHolder;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Iterator;

import javax.media.opengl.GL;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLCanvas;
import javax.media.opengl.glu.GLU;

import menu.Main;
import menu.Teken;
import model.Model;
import model.OBJLoader;
import playerStates.PlayerState;
import enemies.Enemy;
import enemies.EnemySmart;
import enemies.EnemySpooky;

/**
 * MazeRunner is the base class of the game, functioning as the view controller
 * and game logic manager.
 * <p>
 * Functioning as the window containing everything, it initializes both JOGL,
 * the game objects and the game logic needed for MazeRunner.
 * <p>
 * For more information on JOGL, visit <a
 * href="http://jogamp.org/wiki/index.php/Main_Page">this page</a> for general
 * information, and <a
 * href="https://jogamp.org/deployment/jogamp-next/javadoc/jogl/javadoc/">this
 * page</a> for the specification of the API.
 * 
 * @author Bruno Scheele, revised by Mattijs Driel
 * 
 */
public class MazeRunner {

	/*
	 * **********************************************
	 * * Local variables * **********************************************
	 */

	public static int screenWidth, screenHeight; // Screen size.
	public static ArrayList<VisibleObject> visibleObjects = new ArrayList<VisibleObject>();
	public static Player player; // The player object.
	public static ArrayList<Enemy> enemyList = new ArrayList<Enemy>();
	public static ArrayList<Bullet> bulletList = new ArrayList<Bullet>();
	public static ArrayList<Roof> roofList = new ArrayList<Roof>();
	public static ArrayList<Portal> portalList = new ArrayList<Portal>();
	private Camera camera; // The camera object.
	// IMPORTANT: THIS VARIABLE SHOULD'VE BEEN CALLED WORLD. \\
	// We messed up the terminology early on in the project and this name is
	// used quite often now. \\
	// It would take quite some time to change this name, so we didn't. \\
	public static World level;

	private static long previousTime = Calendar.getInstance().getTimeInMillis();
	private long startTime = Calendar.getInstance().getTimeInMillis();
	public static Model spookyModel, m21Model, torchModel, trapModel, copterModel, uh60body, uh60rotor, uh60backrotor;

	public int mazeX, mazeY, mazeZ;
	private UserInput input;
	public static long currentTime;
	public static long playingTime;
	public static int deltaTime;
	private static String eventMessage;
	private static long eventMessageTime;

	/*
	 * **********************************************
	 * * Initialization methods * **********************************************
	 */
	/**
	 * Initializes the complete MazeRunner game.
	 * <p>
	 * MazeRunner extends Java AWT Frame, to function as the window. It creats a
	 * canvas on itself where JOGL will be able to paint the OpenGL graphics. It
	 * then initializes all game components and initializes JOGL, giving it the
	 * proper settings to accurately display MazeRunner. Finally, it adds itself
	 * as the OpenGL event listener, to be able to function as the view
	 * controller.
	 */

	public MazeRunner(int screenWidth, int screenHeight, GLCanvas canvas, GLAutoDrawable drawable, GL gl, GLU glu, UserInput userinput, World level) {
		setScreen(screenWidth, screenHeight);
		init(drawable, gl, glu);
		initObjects(canvas, userinput, level);

	}

	public void setScreen(int Width, int Height) {
		screenWidth = Width;
		screenHeight = Height;
		Reticle.setScreenWidth(screenWidth);
		Reticle.setScreenHeight(screenHeight);
		Minimap.setMinimapX((int) (.4 * MazeRunner.screenWidth));
		Minimap.setMinimapZ((int) (.4 * MazeRunner.screenHeight));
	}

	public void setScreen(GLU glu, GL gl, int Width, int Height) {

		screenWidth = Width;
		screenHeight = Height;

		gl.glViewport(0, 0, screenWidth, screenHeight); // VOOR PORTAL!!!!!!!

		// Set the new projection matrix.
		gl.glMatrixMode(GL.GL_PROJECTION);
		gl.glLoadIdentity();
		glu.gluPerspective(60, screenWidth / screenHeight, .1, 200);
		gl.glMatrixMode(GL.GL_MODELVIEW);

		input.reshape();

	}

	public void noMousechange() {
		player.noMousechange();
		input.noMousechange();
	}

	public void initObjects(GLCanvas canvas, UserInput input, World l) {

		// We define an ArrayList of VisibleObjects to store all the objects
		// that need to be
		// displayed by MazeRunner.
		// Add the maze that we will be using
		level = l;
		GeneticAlgorithm GA = new GeneticAlgorithm(World.mazelist, 50);
		int[] worldConnection = GA.solve();
		Portal.connectPortals(worldConnection);

		System.out.println("Worlds connected in order: " + Arrays.toString(worldConnection));
		// Roof roof = new Roof(0.5, 5, 0.5, 1);
		// roofList.add(roof);

		// portal1 = new Portal(106, 2, 106, 2);
		//
		// portal2 = new Portal(160, 2, 160, 2);

		// Portal.portalConnection(portal1, portal2);
		for (int i = 0; i < level.getAantal(); i++) {
			visibleObjects.add(level.getMaze(i));
		}

		// Initialize the player.
		player = new Player(World.getStartX(), World.getStartY(), World.getStartZ(), World.getStartHorAngle(), 0);
		camera = new Camera(player.getLocationX(), player.getLocationY(), player.getLocationZ(), player.getHorAngle(), player.getVerAngle());

		for (int i = 0; i < enemyList.size(); i++) {
			visibleObjects.add(enemyList.get(i));
		}
		for (int i = 0; i < roofList.size(); i++) {
			visibleObjects.add(roofList.get(i));
		}

		// input = new UserInput(canvas);

		this.input = input;
		player.setControl(input);
	}

	/*
	 * **********************************************
	 * * OpenGL event handlers * **********************************************
	 */

	/**
	 * init(GLAutodrawable) is called to initialize the OpenGL context, giving
	 * it the proper parameters for viewing.
	 * <p>
	 * Implemented through GLEventListener. It sets up most of the OpenGL
	 * settings for the viewing, as well as the general lighting.
	 * <p>
	 * It is <b>very important</b> to realize that there should be no drawing at
	 * all in this method.
	 */
	public void init(GLAutoDrawable drawable, GL gl, GLU glu) {
		Main.glu.gluPerspective(60, screenWidth, screenHeight, 200);
		gl.glMatrixMode(GL.GL_MODELVIEW);

		// TODO: back-face weer aanzetten
		// Enable back-face culling.
		gl.glCullFace(GL.GL_BACK);
		gl.glEnable(GL.GL_CULL_FACE);

		// @Enable Z-buffering, gamestate switch
		// gl.glEnable(GL.GL_DEPTH_TEST);

		initLighting(gl);
		gl.glShadeModel(GL.GL_SMOOTH);
		loadModels(gl);
		
		//Set the event to an empty message, so nothing is drawn on the screen.
		eventMessage = "";
	}

	private void initLighting(GL gl) {
		gl.glEnable(GL.GL_LIGHTING);
		gl.glEnable(GL.GL_LIGHT0);
		float lightAmbient0[] = { 0.5f, 0.5f, 0.5f, 1.0f };
		float lightPosition0[] = { 0.0f, -1.0f, 0.0f, 0f };
		gl.glLightfv(GL.GL_LIGHT0, GL.GL_POSITION, lightPosition0, 0);
		gl.glLightfv(GL.GL_LIGHT0, GL.GL_AMBIENT, lightAmbient0, 0);
		float ambient_lighting[] = { 0.1f, 0.1f, 0.1f, 1.0f };
		gl.glLightModelfv(GL.GL_LIGHT_MODEL_AMBIENT, ambient_lighting, 0);
	}

	//Takes care of the pulsing effect when you are in cloakmode.
	private void updateLighting(GL gl) {
		long cT = currentTime;
		float lI = 0.9f - (float) ((1 + Math.cos(cT / 600f)) / 2);
		float lightAmbient0normal[] = { 0.9f, 0.9f, 0.9f, 1.0f };
		float lightAmbient0cloak[] = { lI, lI, lI, 1.0f };
		if (player.invisible) {
			gl.glLightfv(GL.GL_LIGHT0, GL.GL_AMBIENT, lightAmbient0cloak, 0);
		} else if (!player.invisible) {
			gl.glLightfv(GL.GL_LIGHT0, GL.GL_AMBIENT, lightAmbient0normal, 0);
		}
	}

	public void setTime(long time) {
		previousTime = time;
	}

	// TODO: DEZE METHODE WEGHALEN
	public void multipleView(GLAutoDrawable drawable, GL gl) {

		// 0,0
		gl.glViewport(0, 0, screenWidth / 2, screenHeight / 2);
		gl.glLoadIdentity();
		gl.glScissor(0, 0, screenWidth / 2, screenHeight / 2);
		gl.glEnable(GL.GL_SCISSOR_TEST);
		gl.glMatrixMode(GL.GL_MODELVIEW);
		display(drawable, gl);

		// 1,0
		gl.glViewport(screenWidth / 2, 0, screenWidth, screenHeight / 2);
		gl.glLoadIdentity();
		gl.glScissor(screenWidth / 2, 0, screenWidth, screenHeight / 2);
		gl.glEnable(GL.GL_SCISSOR_TEST);
		gl.glMatrixMode(GL.GL_MODELVIEW);
		display(drawable, gl);

		// 0,1
		gl.glViewport(0, screenHeight / 2, screenWidth / 2, screenHeight);
		gl.glLoadIdentity();
		gl.glScissor(0, screenHeight / 2, screenWidth / 2, screenHeight);
		gl.glEnable(GL.GL_SCISSOR_TEST);
		gl.glMatrixMode(GL.GL_MODELVIEW);
		display(drawable, gl);

		// 1,1
		gl.glViewport(screenWidth / 2, screenHeight / 2, screenWidth, screenHeight);
		gl.glLoadIdentity();
		gl.glScissor(screenWidth / 2, screenHeight / 2, screenWidth, screenHeight);
		gl.glEnable(GL.GL_SCISSOR_TEST);
		gl.glMatrixMode(GL.GL_MODELVIEW);
		display(drawable, gl);

	}

	/**
	 * display(GLAutoDrawable) is called upon whenever OpenGL is ready to draw a
	 * new frame and handles all of the drawing.
	 * <p>
	 * Implemented through GLEventListener. In order to draw everything needed,
	 * it iterates through MazeRunners' list of visibleObjects. For each
	 * visibleObject, this method calls the object's display(GL) function, which
	 * specifies how that object should be drawn. The object is passed a
	 * reference of the GL context, so it knows where to draw.
	 */
	public void display(GLAutoDrawable drawable, GL gl) {
		Main.everplayed = true;
		ChangeGL.GLto3D(gl);

		gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
		gl.glLoadIdentity();

		GLU glu = new GLU();

		// Calculating time since last frame.
		Calendar now = Calendar.getInstance();
		currentTime = now.getTimeInMillis() - startTime;

		deltaTime = (int) (currentTime - previousTime);
		previousTime = currentTime;

		if (deltaTime > 100 | deltaTime < 0) {
			deltaTime = 0;
		}

		// time = previousTime-startTime;

		// this.time;

		// System.out.println(previousTime);s

		// Update any movement since last frame.

		updateMovement(deltaTime, drawable);
		updateCamera();
		updatePlayingTime();
		updateLighting(gl);

		// gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);

		Skybox.displaySkybox(gl);
		if (player.getControl().minimap && player.playerStateInt != 4) {
			Minimap.displayMinimap(gl);
		}

		if (player.playerStateInt == 2) {
			Reticle.display(gl);
		}

		gl.glLoadIdentity();
		glu.gluLookAt(camera.getLocationX(), camera.getLocationY(), camera.getLocationZ(), camera.getVrpX(), camera.getVrpY(), camera.getVrpZ(), camera.getVuvX(), camera.getVuvY(), camera.getVuvZ());

		// gl.glLoadIdentity();

		// gl.glViewport(0, 0, screenWidth/2, screenHeight/2);
		// gl.glScissor(0,0,screenWidth/2,screenHeight/2);
		// gl.glEnable(GL.GL_SCISSOR_TEST);

		for (int i = 0; i < visibleObjects.size(); i++) {
			VisibleObject next = visibleObjects.get(i);
			if (next instanceof TrapDroppedGBS && ((TrapDroppedGBS) next).getUsed()) {
				visibleObjects.remove(next);
				System.out.println("removed TrapDroppedGBS");
			} else if (next instanceof TrapDropped && !(next instanceof TrapDroppedGBS) && !((TrapDropped) next).getLegal()) {
				visibleObjects.remove(next);
				System.out.println("removed TrapDropped");
			} else if (next instanceof EnemySmart && ((EnemySmart) next).getDead()) {
				visibleObjects.remove(next);
				System.out.println("removed EnemySmart");
			} else if (next instanceof EnemySpooky && ((EnemySpooky) next).getDead()) {
				visibleObjects.remove(next);
				System.out.println("removed EnemySpooky");
			} else if (next instanceof Roof && !((Roof) next).getLegal()) {
				visibleObjects.remove(next);
				System.out.println("removed Roof");
			}
		}

		// Display all the visible objects of MazeRunner.
		for (Iterator<VisibleObject> it = visibleObjects.iterator(); it.hasNext();) {
			it.next().display(gl);
		}

		gl.glDisable(GL.GL_CULL_FACE);
		PlayerState.getState(MazeRunner.player.playerStateInt).displayItem(gl);

		// Hier wordt de aanroep gedaan voor alle portaldisplay functies
		// Portal.activePortaldisplay(gl);

		gl.glEnable(GL.GL_CULL_FACE);

		if (player.getControl().info) {
			PlayerState.getState(player.playerStateInt).drawInfo(drawable, gl);
			if (!(player.playerStateInt == 3 || player.playerStateInt == 4)) {
				Teken.textDraw(drawable, gl, "Score: " + player.score + " Time: " + playingTime / 1000, (float) (0.05 * screenHeight), (float) (0.05 * screenWidth), 30);
				Teken.textDraw(drawable, gl, "Current Maze: " + (level.getCurrentMaze(player) + 1), (float) (0.05 * screenHeight), (float) (0.11 * screenWidth), 30);
			}
		}
		if (currentTime + startTime - eventMessageTime > 3000) {
			setEventMessage("");
		}
		Teken.textDraw(drawable, gl, eventMessage, 0.4f * screenWidth, 0.9f * screenHeight, 30);

		gl.glLoadIdentity();
		// Flush the OpenGL buffer.
		// gl.glDisable(GL.GL_STENCIL_TEST);
		gl.glFlush();

	}

	/**
	 * reshape(GLAutoDrawable, int, int, int, int, int) is called upon whenever
	 * the viewport changes shape, to update the viewport setting accordingly.
	 * <p>
	 * Implemented through GLEventListener. This mainly happens when the window
	 * changes size, thus changing the canvas (and the viewport that OpenGL
	 * associates with it). It adjust the projection matrix to accomodate the
	 * new shape.
	 */
	/*
	 * public void reshape(GLAutoDrawable drawable, int x, int y, int width, int
	 * height) { GL gl = drawable.getGL(); GLU glu = new GLU();
	 * 
	 * // Setting the new screen size and adjusting the viewport. screenWidth =
	 * width; screenHeight = height; gl.glViewport(0, 0, screenWidth,
	 * screenHeight); // VOOR PORTAL!!!!!!!
	 * 
	 * 
	 * 
	 * // Set the new projection matrix. gl.glMatrixMode(GL.GL_PROJECTION);
	 * gl.glLoadIdentity(); glu.gluPerspective(60, screenWidth / screenHeight,
	 * .1, 200); gl.glMatrixMode(GL.GL_MODELVIEW); }
	 */

	/*
	 * **********************************************
	 * * Methods * **********************************************
	 */

	private void updatePlayingTime() {
		if (player.playerStateInt != 3 && player.playerStateInt != 4) {
			playingTime += deltaTime;
		}
	}

	/**
	 * updateCamera() updates the camera position and orientation.
	 * <p>
	 * This is done by copying the locations from the Player, since MazeRunner
	 * runs on a first person view.
	 */

	private void updateCamera() {
		camera.setLocationX(player.getLocationX());
		camera.setLocationY(player.getLocationY());
		camera.setLocationZ(player.getLocationZ());
		camera.setHorAngle(player.getHorAngle());
		camera.setVerAngle(player.getVerAngle());
		camera.calculateVRP();
	}

	public static Player getPlayer() {
		return player;
	}

	/*
	 * **********************************************
	 * * Main * **********************************************
	 */
	/**
	 * Program entry point
	 * 
	 * @param args
	 * @throws IOException
	 */

	// Loads all the texture and stores them into the memory. We have to keep
	// track of the order ourselves.

	public void loadModels(GL gl) {

		gl.glEnable(GL.GL_TEXTURE_2D);

		try {
			String currentdir = System.getProperty("user.dir");
			String filename = currentdir + "\\models\\uh60.obj";
			copterModel = OBJLoader.loadTexturedModel(new File(filename));

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		try {
			String currentdir = System.getProperty("user.dir");
			String filename = currentdir + "\\models\\uh60body.obj";
			uh60body = OBJLoader.loadTexturedModel(new File(filename));

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		try {
			String currentdir = System.getProperty("user.dir");
			String filename = currentdir + "\\models\\uh60rotor.obj";
			uh60rotor = OBJLoader.loadTexturedModel(new File(filename));

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		try {
			String currentdir = System.getProperty("user.dir");
			String filename = currentdir + "\\models\\uh60backrotor.obj";
			uh60backrotor = OBJLoader.loadTexturedModel(new File(filename));

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		try {
			String currentdir = System.getProperty("user.dir");
			String filename = currentdir + "\\models\\eva.obj";
			spookyModel = OBJLoader.loadTexturedModel(new File(filename));

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			String currentdir = System.getProperty("user.dir");
			String filename = currentdir + "\\models\\m21.obj";
			m21Model = OBJLoader.loadTexturedModel(new File(filename));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			String currentdir = System.getProperty("user.dir");
			String filename = currentdir + "\\models\\medieval-torch.obj";
			torchModel = OBJLoader.loadTexturedModel(new File(filename));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			String currentdir = System.getProperty("user.dir");
			String filename = currentdir + "\\models\\cuboid.obj";
			trapModel = OBJLoader.loadTexturedModel(new File(filename));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void updateMovement(int deltaTime, GLAutoDrawable drawable) {

		double previousX = player.getLocationX();
		double previousY = player.getLocationY();
		double previousZ = player.getLocationZ();

		// Player updating
		player.update(deltaTime, drawable);
		int currentMazeID = level.getCurrentMaze(player);
		if (currentMazeID != -1) {
			Maze currentMaze = level.getMaze(currentMazeID);

			for (int i = 0; i < currentMaze.itemList.size(); i++) {
				Item item = currentMaze.itemList.get(i);
				if (item.touches(player)) {
					if (item instanceof TrapHolder) {
						MazeRunner.player.nrOfTraps++;
						setEventMessage("Picked up a trap!");
						visibleObjects.remove(currentMaze.itemList.get(i));
						currentMaze.itemList.remove(i);
					}
					if (item instanceof BulletHolder) {
						setEventMessage("Picked up " + ((BulletHolder) item).getAmount() + " bullets!");
						MazeRunner.player.nrOfBullets += ((BulletHolder) item).getAmount();
						visibleObjects.remove(currentMaze.itemList.get(i));
						currentMaze.itemList.remove(i);
					}
				}
			}
			// Check for collision between TrapDropped items, if so, call bounce
			// method.
			for (int i = 0; i < currentMaze.itemList.size(); i++) {
				Item itemi = currentMaze.itemList.get(i);
				if (itemi instanceof TrapDropped) {
					for (int j = 0; j < currentMaze.itemList.size(); j++) {
						Item itemj = currentMaze.itemList.get(j);
						if (itemi.touches(itemj) && i != j && itemj instanceof TrapDropped) {
							((TrapDropped) itemi).bounce((TrapDropped) itemj);
						}
					}
				}
			}
		}

		// Enemy updating
		for (int e = 0; e < enemyList.size(); e++) { // for each enemy
			Enemy enemy = enemyList.get(e);
			currentMazeID = level.getCurrentMaze(enemy);
			if (currentMazeID != -1) {
				Maze currentMaze = level.getMaze(currentMazeID);
				// double enemyX = enemy.getX();
				// double enemyZ = enemy.getZ();
				enemy.update(deltaTime, player);

				// For each item
				for (int i = 0; i < currentMaze.itemList.size(); i++) {
					Item item = currentMaze.itemList.get(i);
					if (item.touches(enemy) && item instanceof TrapDropped) {
						if (!((TrapDropped) item).inair) {
							// Enemy
							enemyList.remove(enemy);
							enemy.setSpeed(0);
							enemy.setTrapped(true);
							enemy.setTOD(currentTime);
							enemy.setTrappedX(item.locationX);
							enemy.setTrappedY(item.locationY);
							enemy.setTrappedZ(item.locationZ);

							// Item - TrapDropped
							((TrapDropped) item).setTimeUsed(currentTime);
							((TrapDropped) item).setUsed(true);

							// Item - TrapDropped - remove from itemlist in maze
							MazeRunner.level.getMaze(MazeRunner.level.getCurrentMaze(enemy)).itemList.remove(item);

							// Create trap GBS
							TrapDroppedGBS tdGBS = new TrapDroppedGBS(item.locationX, item.locationY, item.locationZ, item.mazeID, currentTime);
							visibleObjects.add(tdGBS);
						}
						if (enemy instanceof EnemySpooky) {
							setEventMessage("Killed a spooky enemy with a trap! +100 points");
							player.score += 100;
						} else if (enemy instanceof EnemySmart) {
							setEventMessage("Killed a smart enemy with a trap! +100 points");
							player.score += 100;
						}
					}

				}
			}

		}
		for (int bNr = 0; bNr < bulletList.size(); bNr++) {
			Bullet b = bulletList.get(bNr);
			b.update(deltaTime);
			int i = MazeRunner.level.getCurrentMaze(b);
			if (i != -1) {
				Maze maze = World.mazelist.get(i);
				// Check for collision with floor
				if (b.locationY < maze.mazeY + 0.1) {
					visibleObjects.remove(b);
					bulletList.remove(b);
				}
				// Check for collision with level
				if (MazeRunner.level.collides(b, 0)[0] && MazeRunner.level.collides(b, 0)[1]) {
					if (b.locationY <= maze.mazeY + Maze.ITEM_HEIGHT * maze.maze[maze.coordToMatrixElement(b.locationX - maze.mazeX)][maze.coordToMatrixElement(b.locationZ - maze.mazeZ)]) {
						if ((maze.textureMatrix[maze.coordToMatrixElement(b.locationX - maze.mazeX)][maze.coordToMatrixElement(b.locationZ - maze.mazeZ)] % 2 == 0)) {
							maze.maze[maze.coordToMatrixElement(b.locationX - maze.mazeX)][maze.coordToMatrixElement(b.locationZ - maze.mazeZ)] = -1;
							bulletList.remove(b);
							visibleObjects.remove(b);
						} else {
							bulletList.remove(b);
							visibleObjects.remove(b);
						}
					}

				}
				// Check for collision with player
				if (b.touches(player)) {
					PlayerState.getState(player.playerStateInt).leaving();
					player.playerStateInt = 3;
					PlayerState.getState(player.playerStateInt).entering();
					visibleObjects.remove(b);
					bulletList.remove(b);
					setEventMessage("You just shot yourself, dummy! No points lost");
					player.score += 1000;
				}
			}
			for (int eNr = 0; eNr < enemyList.size(); eNr++) {
				Enemy e = enemyList.get(eNr);

				if (b.touches(e) && e instanceof EnemySmart) {
					e.setDead(true);
					visibleObjects.remove(b);
					bulletList.remove(b);
					enemyList.remove(e);
					setEventMessage("Killed a smart enemy with a bullet! +100 points");
					player.score += 100;
					break;
				}
			}

		}
		for (int rNr = 0; rNr < roofList.size(); rNr++) {
			Roof r = roofList.get(rNr);
			if (!r.isOnWalls()) {
				r.locationY -= deltaTime * r.fallingSpeed;
				r.fallingSpeed = r.fallingSpeed * 1.005;
				Maze maze = level.getMaze(r.mazeID);

				if (r.locationY < maze.mazeY + 0.5) {

					try {
						Sound.play("crash.wav");
					} catch (Exception e) {
						System.out.println("no noBullets sound");
					}

					roofList.remove(r);
					r.setLegal(false);
					for (int eNr = 0; eNr < enemyList.size(); eNr++) {
						Enemy e = enemyList.get(eNr);
						System.out.println(maze.coordToMatrixElement(e.getGlobalX() - maze.mazeX) + " " + r.matrixX + " " + maze.coordToMatrixElement(e.getGlobalZ() - maze.mazeZ) + " " + r.matrixZ);
						if (e instanceof EnemySmart && maze.coordToMatrixElement(e.getGlobalX() - maze.mazeX) == r.matrixX && maze.coordToMatrixElement(e.getGlobalZ() - maze.mazeZ) == r.matrixZ
								&& Math.abs(r.getLocationY() - e.getLocationY()) < 5) {
							enemyList.remove(e);
							player.score += 500;
							setEventMessage("A roof dropped on a smart enemy! +500 points");
							e.setDead(true);
						}
					}
					if (maze.coordToMatrixElement(player.getGlobalX() - maze.mazeX) == r.matrixX && maze.coordToMatrixElement(player.getGlobalZ() - maze.mazeZ) == r.matrixZ
							&& player.playerStateInt != 4 && player.playerStateInt != 5) {
						PlayerState.getState(MazeRunner.player.playerStateInt).leaving();
						setEventMessage("A roof fell on you!");
						MazeRunner.player.playerStateInt = 3;
						PlayerState.getState(MazeRunner.player.playerStateInt).entering();
					}
				}
			}
		}

		// dit hoort uiteindelijk in Portal en vervangt portalfunctionaliteit in
		// updateMovement
		// ****************
		// public static void WillTeleport(boolean canTeleport,
		// ArrayList<Portal> portalList){
		// for (int i = 0; i < portalList.size(); i++) {
		// portalList.get(i).checkteleportation(player, (float) previousX,
		// (float) previousY, (float) previousZ);
		//
		// }
		// } else {
		// MazeRunner.player.canTeleport = true;
		// }
		// }

		// TODO dit hoort eigenlijk in de portal klasse
		if (MazeRunner.player.canTeleport) {
			for (int i = 0; i < portalList.size(); i++) {
				portalList.get(i).checkteleportation(player, (float) previousX, (float) previousY, (float) previousZ);
				// portal2.checkteleportation(player, (float) previousX, (float)
				// previousY, (float) previousZ);
			}
		} else {
			MazeRunner.player.canTeleport = true;
		}

		for (Maze m : World.mazelist) {
			for (Item i : m.itemList) {
				if (i instanceof Exit) {
					if (i.touches(player) && player.playerStateInt != 4 && player.playerStateInt != 5) {
						PlayerState.getState(MazeRunner.player.playerStateInt).leaving();
						MazeRunner.player.playerStateInt = 4;
						PlayerState.getState(MazeRunner.player.playerStateInt).entering();

					}
				}
			}
		}
	}

	public static void visibleIterator(GL gl) {
		for (Iterator<VisibleObject> it = visibleObjects.iterator(); it.hasNext();) {
			it.next().display(gl);
		}
	}

	public static int getScreenWidth() {
		return screenWidth;
	}

	public static int getScreenHeight() {
		return screenHeight;
	}

	public static void setEventMessage(String eveMsg) {
		eventMessageTime = Calendar.getInstance().getTimeInMillis();
		eventMessage = eveMsg;
	}

}
